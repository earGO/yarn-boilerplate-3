{"version":3,"sources":["reduxSagas.test.js"],"names":["error","success","thunk","selectors","moduleActions","fetchMock","projectCardService","configureStore","projectCardReducer","name","types","actions","api","endpoints","initialMockState","mockTitle","mockData","middlewares","mockStore","store","project","describe","prop","hasOwnProperty","it","typeValue","expect","toBe","successAction","type","LOAD_PROJECT","payload","data","test","toEqual","errorAction","initialState","beforeEach","clearActions","afterEach","restore","expectedActions","request","url","dispatch","loadProject","getActions","endpoint","getOnce","body","someprojectId","headers","LOAD_TABS"],"mappings":"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","sourcesContent":["import {error, success} from 'redux-saga-requests';\nimport thunk from 'redux-thunk';\nimport {selectors} from '../module/selectors';\nimport * as moduleActions from '../module/actions';\nimport fetchMock from 'fetch-mock';\nimport {projectCardService} from '../../../import';\nimport configureStore from 'redux-mock-store';\n\nconst {\n\tprojectCardReducer,\n\tname,\n\ttypes,\n\tactions,\n\tapi,\n\tendpoints\n} = projectCardService;\n\nconst initialMockState = {\n\tmockTitle: 'mockTitle',\n\tmockData: ['papul', 'banana', 'minion']\n};\n\nconst middlewares = [thunk];\nconst mockStore = configureStore(middlewares);\nconst store = mockStore({project: []});\n\ndescribe('Test projectCard service', () => {\n\tfor (var prop in types) {\n\t\tif (types.hasOwnProperty(prop)) {\n\t\t\tit('type format should be correct', () => {\n\t\t\t\tconst typeValue = name + '/' + prop;\n\t\t\t\texpect(types[prop]).toBe(typeValue);\n\t\t\t});\n\t\t}\n\t}\n});\n\ndescribe('Test projectCard service reducer', () => {\n\tit('should handle LOAD_PROJECT', () => {\n\t\tconst successAction = {\n\t\t\ttype: success(types.LOAD_PROJECT),\n\t\t\tpayload: {data: {test: 'test'}}\n\t\t};\n\t\texpect(projectCardReducer({}, successAction)).toEqual({\n\t\t\tproject: {test: 'test'}\n\t\t});\n\t});\n\tit('should return emptyState when error', () => {\n\t\tconst errorAction = {\n\t\t\ttype: error(types.LOAD_PROJECT),\n\t\t\tpayload: \"if you see it reducer doesn't works\"\n\t\t};\n\t\texpect(\n\t\t\tprojectCardReducer({initialState: 'initialState'}, errorAction)\n\t\t).toEqual({initialState: 'initialState'});\n\t});\n});\n\ndescribe('Test projectCard service actions', () => {\n\tbeforeEach(() => {\n\t\t// Runs before each test in the suite\n\t\tstore.clearActions();\n\t});\n\tafterEach(() => {\n\t\tfetchMock.restore();\n\t});\n\ttest('Dispatches the correct action and payload', () => {\n\t\tconst expectedActions = [\n\t\t\t{\n\t\t\t\tpayload: {request: {url: 'http://localhost:3000/project/'}},\n\t\t\t\ttype: 'project-card/LOAD_PROJECT'\n\t\t\t}\n\t\t];\n\t\tstore.dispatch(actions.loadProject());\n\t\texpect(store.getActions()).toEqual(expectedActions);\n\t});\n\ttest('creates project-card/LOAD_PROJECT_SUCCESS when fetching data has been done', () => {\n\t\tconst endpoint = api + endpoints.project;\n\t\tfetchMock.getOnce(endpoint, {\n\t\t\tbody: {project: {someprojectId: 'theId'}},\n\t\t\theaders: {'content-type': 'application/json'}\n\t\t});\n\n\t\tconst expectedActions = [\n\t\t\t{type: types.LOAD_PROJECT},\n\t\t\t{\n\t\t\t\ttype: success(types.LOAD_TABS),\n\t\t\t\tbody: {project: {someprojectId: 'theId'}}\n\t\t\t}\n\t\t];\n\t\tstore.dispatch(actions.loadProject());\n\t\texpect(store.getActions()).toEqual(expectedActions);\n\t});\n});\n"]}