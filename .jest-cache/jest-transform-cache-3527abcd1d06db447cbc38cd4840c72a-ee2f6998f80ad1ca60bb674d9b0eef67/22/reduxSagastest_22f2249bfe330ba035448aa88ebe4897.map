{"version":3,"sources":["reduxSagas.test.js"],"names":["projectCardReducer","projectCardService","name","types","actions","api","endpoints","initialMockState","mockTitle","mockData","middlewares","thunk","mockStore","store","project","describe","prop","hasOwnProperty","it","typeValue","expect","toBe","successAction","type","LOAD_PROJECT","payload","data","test","toEqual","errorAction","initialState","beforeEach","clearActions","afterEach","fetchMock","restore","expectedActions","request","url","dispatch","loadProject","getActions"],"mappings":"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","sourcesContent":["import {error, success} from 'redux-saga-requests';\nimport thunk from 'redux-thunk';\nimport {selectors} from '../module/selectors';\nimport * as moduleActions from '../module/actions';\nimport fetchMock from 'fetch-mock';\nimport {projectCardService} from '../../../import';\nimport configureStore from 'redux-mock-store';\n\nconst {\n\tprojectCardReducer,\n\tname,\n\ttypes,\n\tactions,\n\tapi,\n\tendpoints\n} = projectCardService;\n\nconst initialMockState = {\n\tmockTitle: 'mockTitle',\n\tmockData: ['papul', 'banana', 'minion']\n};\n\nconst middlewares = [thunk];\nconst mockStore = configureStore(middlewares);\nconst store = mockStore({project: []});\n\ndescribe('Test projectCard service', () => {\n\tfor (var prop in types) {\n\t\tif (types.hasOwnProperty(prop)) {\n\t\t\tit('type format should be correct', () => {\n\t\t\t\tconst typeValue = name + '/' + prop;\n\t\t\t\texpect(types[prop]).toBe(typeValue);\n\t\t\t});\n\t\t}\n\t}\n});\n\ndescribe('Test projectCard service reducer', () => {\n\tit('should handle LOAD_PROJECT', () => {\n\t\tconst successAction = {\n\t\t\ttype: success(types.LOAD_PROJECT),\n\t\t\tpayload: {data: {test: 'test'}}\n\t\t};\n\t\texpect(projectCardReducer({}, successAction)).toEqual({\n\t\t\tproject: {test: 'test'}\n\t\t});\n\t});\n\tit('should return emptyState when error', () => {\n\t\tconst errorAction = {\n\t\t\ttype: error(types.LOAD_PROJECT),\n\t\t\tpayload: \"if you see it reducer doesn't works\"\n\t\t};\n\t\texpect(\n\t\t\tprojectCardReducer({initialState: 'initialState'}, errorAction)\n\t\t).toEqual({initialState: 'initialState'});\n\t});\n});\n\ndescribe('Test projectCard service actions', () => {\n\tbeforeEach(() => {\n\t\t// Runs before each test in the suite\n\t\tstore.clearActions();\n\t});\n\tafterEach(() => {\n\t\tfetchMock.restore();\n\t});\n\ttest('Dispatches the correct action and payload', () => {\n\t\tconst expectedActions = [\n\t\t\t{\n\t\t\t\tpayload: {request: {url: 'http://localhost:3000/project/'}},\n\t\t\t\ttype: 'project-card/LOAD_PROJECT'\n\t\t\t}\n\t\t];\n\t\tstore.dispatch(actions.loadProject());\n\t\texpect(store.getActions()).toEqual(expectedActions);\n\t});\n});\n"]}