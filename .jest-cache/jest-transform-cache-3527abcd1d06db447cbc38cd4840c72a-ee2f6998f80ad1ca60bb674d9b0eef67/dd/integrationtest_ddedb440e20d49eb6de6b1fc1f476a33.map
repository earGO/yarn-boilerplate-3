{"version":3,"sources":["integration.test.js"],"names":["mockData","simpleMockField","describe","it","sagas","loadWeatherData","provide","call","effect","next","fn","serverRequests","simpleGetRequest","put","type","types","LOAD_WEATHER","payload","silentRun"],"mappings":";;AAAA;;AACA;;AACA;;AACA;;AACA;;AAQA,IAAMA,QAAQ,GAAG;AAChBC,EAAAA,eAAe,EAAE;AADD,CAAjB;AAIAC,QAAQ,CAAC,6CAAD,EAAgD,YAAM;AAC7DC,EAAAA,EAAE,CAAC,mCAAD,EAAsC,YAAM;AAC7C,WAAO,mCAAWC,mBAAMC,eAAjB,EACLC,OADK,CACG;AACRC,MAAAA,IADQ,gBACHC,MADG,EACKC,IADL,EACW;AAClB;AACA,YAAID,MAAM,CAACE,EAAP,KAAcC,sBAAeC,gBAAjC,EAAmD;AAClD,iBAAO;AAACZ,YAAAA,QAAQ,EAARA;AAAD,WAAP;AACA,SAJiB,CAMlB;;;AACA,eAAOS,IAAI,EAAX;AACA;AATO,KADH,EAYLI,GAZK,CAYD;AACJC,MAAAA,IAAI,EAAEC,sBAAMC,YADR;AAEJC,MAAAA,OAAO,EAAE;AAACjB,QAAAA,QAAQ,EAARA;AAAD;AAFL,KAZC,EAgBLkB,SAhBK,EAAP;AAiBA,GAlBC,CAAF;AAmBA,CApBO,CAAR","sourcesContent":["import {call, put, take} from 'redux-saga/effects';\r\nimport {expectSaga} from 'redux-saga-test-plan';\r\nimport {serverRequests} from '@project/utils';\r\nimport {sagas} from '../weather-duck';\r\nimport {\r\n\ttypes,\r\n\tactions,\r\n\tname,\r\n\tapi,\r\n\tactions as serviceActions\r\n} from '../weather-service';\r\n\r\nconst mockData = {\r\n\tsimpleMockField: 'simpleMockValue'\r\n};\r\n\r\ndescribe('Test weather-duck with redux-saga-test-plan', () => {\r\n\tit('provides a value for the API call', () => {\r\n\t\treturn expectSaga(sagas.loadWeatherData)\r\n\t\t\t.provide({\r\n\t\t\t\tcall(effect, next) {\r\n\t\t\t\t\t// Check for the API call to return fake value\r\n\t\t\t\t\tif (effect.fn === serverRequests.simpleGetRequest) {\r\n\t\t\t\t\t\treturn {mockData};\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// Allow Redux Saga to handle other `call` effects\r\n\t\t\t\t\treturn next();\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t\t.put({\r\n\t\t\t\ttype: types.LOAD_WEATHER,\r\n\t\t\t\tpayload: {mockData}\r\n\t\t\t})\r\n\t\t\t.silentRun();\r\n\t});\r\n});\r\n"]}