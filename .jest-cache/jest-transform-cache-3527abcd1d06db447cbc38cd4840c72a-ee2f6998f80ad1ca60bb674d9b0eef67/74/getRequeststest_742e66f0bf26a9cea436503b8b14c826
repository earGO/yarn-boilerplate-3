135271cd8478c41d51e0355f8b4bc61b
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _getRequests = require("../getRequests");

var _ = _interopRequireDefault(require("../."));

var _fetchMock = _interopRequireDefault(require("fetch-mock"));

/**
 * we gonna test if this util returns expected call from mock api,
 * and if it returns error, when api URL is wrong
 * */
var api = 'http://localhost:3000/user';
var apiWrong = 'http://localhost:3200/wrong';
var correct = {
  id: 'mr2w3s0m3',
  name: 'Barney',
  lastname: 'Stinson'
};
describe('Test simpleGetRequest from server requests in utils', function () {
  test('returns correct value from correct api',
  /*#__PURE__*/
  (0, _asyncToGenerator2["default"])(
  /*#__PURE__*/
  _regenerator["default"].mark(function _callee() {
    var result;
    return _regenerator["default"].wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return (0, _getRequests.simpleGetRequest)(api);

          case 2:
            result = _context.sent;
            expect(result).toStrictEqual(correct);

          case 4:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, this);
  })));
  test('the fetch fails with an error if empty',
  /*#__PURE__*/
  (0, _asyncToGenerator2["default"])(
  /*#__PURE__*/
  _regenerator["default"].mark(function _callee2() {
    var result;
    return _regenerator["default"].wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            _context2.next = 2;
            return (0, _getRequests.simpleGetRequest)(apiWrong);

          case 2:
            result = _context2.sent;
            expect(Object.keys(result)).toStrictEqual(['error', 'body']);

          case 4:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2, this);
  })));
});
describe('Test serverRequests imports and exports serverRequests utils', function () {
  it('should call the api',
  /*#__PURE__*/
  (0, _asyncToGenerator2["default"])(
  /*#__PURE__*/
  _regenerator["default"].mark(function _callee3() {
    var response, result;
    return _regenerator["default"].wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            _fetchMock["default"].get(api, correct);

            _context3.next = 3;
            return _["default"].simpleGetRequest(api);

          case 3:
            response = _context3.sent;
            _context3.next = 6;
            return response.json();

          case 6:
            result = _context3.sent;
            expect(result).toEqual(correct);

          case 8:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3, this);
  })));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImdldFJlcXVlc3RzLnRlc3QuanMiXSwibmFtZXMiOlsiYXBpIiwiYXBpV3JvbmciLCJjb3JyZWN0IiwiaWQiLCJuYW1lIiwibGFzdG5hbWUiLCJkZXNjcmliZSIsInRlc3QiLCJyZXN1bHQiLCJleHBlY3QiLCJ0b1N0cmljdEVxdWFsIiwiT2JqZWN0Iiwia2V5cyIsIml0IiwiZmV0Y2hNb2NrIiwiZ2V0Iiwic2VydmVyUmVxdWVzdHMiLCJzaW1wbGVHZXRSZXF1ZXN0IiwicmVzcG9uc2UiLCJqc29uIiwidG9FcXVhbCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFDQTs7QUFFQTs7OztBQUtBLElBQU1BLEdBQUcsR0FBRyw0QkFBWjtBQUNBLElBQU1DLFFBQVEsR0FBRyw2QkFBakI7QUFDQSxJQUFNQyxPQUFPLEdBQUc7QUFDZkMsRUFBQUEsRUFBRSxFQUFFLFdBRFc7QUFFZkMsRUFBQUEsSUFBSSxFQUFFLFFBRlM7QUFHZkMsRUFBQUEsUUFBUSxFQUFFO0FBSEssQ0FBaEI7QUFNQUMsUUFBUSxDQUFDLHFEQUFELEVBQXdELFlBQU07QUFDckVDLEVBQUFBLElBQUksQ0FBQyx3Q0FBRDtBQUFBO0FBQUE7QUFBQTtBQUFBLCtCQUEyQztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLG1CQUN6QixtQ0FBaUJQLEdBQWpCLENBRHlCOztBQUFBO0FBQ3hDUSxZQUFBQSxNQUR3QztBQUU5Q0MsWUFBQUEsTUFBTSxDQUFDRCxNQUFELENBQU4sQ0FBZUUsYUFBZixDQUE2QlIsT0FBN0I7O0FBRjhDO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEdBQTNDLEdBQUo7QUFJQUssRUFBQUEsSUFBSSxDQUFDLHdDQUFEO0FBQUE7QUFBQTtBQUFBO0FBQUEsK0JBQTJDO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsbUJBQ3pCLG1DQUFpQk4sUUFBakIsQ0FEeUI7O0FBQUE7QUFDeENPLFlBQUFBLE1BRHdDO0FBRTlDQyxZQUFBQSxNQUFNLENBQUNFLE1BQU0sQ0FBQ0MsSUFBUCxDQUFZSixNQUFaLENBQUQsQ0FBTixDQUE0QkUsYUFBNUIsQ0FBMEMsQ0FBQyxPQUFELEVBQVUsTUFBVixDQUExQzs7QUFGOEM7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsR0FBM0MsR0FBSjtBQUlBLENBVE8sQ0FBUjtBQVdBSixRQUFRLENBQUMsOERBQUQsRUFBaUUsWUFBTTtBQUM5RU8sRUFBQUEsRUFBRSxDQUFDLHFCQUFEO0FBQUE7QUFBQTtBQUFBO0FBQUEsK0JBQXdCO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUN6QkMsa0NBQVVDLEdBQVYsQ0FBY2YsR0FBZCxFQUFtQkUsT0FBbkI7O0FBRHlCO0FBQUEsbUJBR0ZjLGFBQWVDLGdCQUFmLENBQWdDakIsR0FBaEMsQ0FIRTs7QUFBQTtBQUduQmtCLFlBQUFBLFFBSG1CO0FBQUE7QUFBQSxtQkFJSkEsUUFBUSxDQUFDQyxJQUFULEVBSkk7O0FBQUE7QUFJbkJYLFlBQUFBLE1BSm1CO0FBTXpCQyxZQUFBQSxNQUFNLENBQUNELE1BQUQsQ0FBTixDQUFlWSxPQUFmLENBQXVCbEIsT0FBdkI7O0FBTnlCO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEdBQXhCLEdBQUY7QUFRQSxDQVRPLENBQVIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge3NpbXBsZUdldFJlcXVlc3R9IGZyb20gJy4uL2dldFJlcXVlc3RzJztcbmltcG9ydCBzZXJ2ZXJSZXF1ZXN0cyBmcm9tICcuLi8uJztcbmltcG9ydCBmZXRjaE1vY2sgZnJvbSAnZmV0Y2gtbW9jayc7XG5cbi8qKlxuICogd2UgZ29ubmEgdGVzdCBpZiB0aGlzIHV0aWwgcmV0dXJucyBleHBlY3RlZCBjYWxsIGZyb20gbW9jayBhcGksXG4gKiBhbmQgaWYgaXQgcmV0dXJucyBlcnJvciwgd2hlbiBhcGkgVVJMIGlzIHdyb25nXG4gKiAqL1xuXG5jb25zdCBhcGkgPSAnaHR0cDovL2xvY2FsaG9zdDozMDAwL3VzZXInO1xuY29uc3QgYXBpV3JvbmcgPSAnaHR0cDovL2xvY2FsaG9zdDozMjAwL3dyb25nJztcbmNvbnN0IGNvcnJlY3QgPSB7XG5cdGlkOiAnbXIydzNzMG0zJyxcblx0bmFtZTogJ0Jhcm5leScsXG5cdGxhc3RuYW1lOiAnU3RpbnNvbidcbn07XG5cbmRlc2NyaWJlKCdUZXN0IHNpbXBsZUdldFJlcXVlc3QgZnJvbSBzZXJ2ZXIgcmVxdWVzdHMgaW4gdXRpbHMnLCAoKSA9PiB7XG5cdHRlc3QoJ3JldHVybnMgY29ycmVjdCB2YWx1ZSBmcm9tIGNvcnJlY3QgYXBpJywgYXN5bmMgKCkgPT4ge1xuXHRcdGNvbnN0IHJlc3VsdCA9IGF3YWl0IHNpbXBsZUdldFJlcXVlc3QoYXBpKTtcblx0XHRleHBlY3QocmVzdWx0KS50b1N0cmljdEVxdWFsKGNvcnJlY3QpO1xuXHR9KTtcblx0dGVzdCgndGhlIGZldGNoIGZhaWxzIHdpdGggYW4gZXJyb3IgaWYgZW1wdHknLCBhc3luYyAoKSA9PiB7XG5cdFx0Y29uc3QgcmVzdWx0ID0gYXdhaXQgc2ltcGxlR2V0UmVxdWVzdChhcGlXcm9uZyk7XG5cdFx0ZXhwZWN0KE9iamVjdC5rZXlzKHJlc3VsdCkpLnRvU3RyaWN0RXF1YWwoWydlcnJvcicsICdib2R5J10pO1xuXHR9KTtcbn0pO1xuXG5kZXNjcmliZSgnVGVzdCBzZXJ2ZXJSZXF1ZXN0cyBpbXBvcnRzIGFuZCBleHBvcnRzIHNlcnZlclJlcXVlc3RzIHV0aWxzJywgKCkgPT4ge1xuXHRpdCgnc2hvdWxkIGNhbGwgdGhlIGFwaScsIGFzeW5jICgpID0+IHtcblx0XHRmZXRjaE1vY2suZ2V0KGFwaSwgY29ycmVjdCk7XG5cblx0XHRjb25zdCByZXNwb25zZSA9IGF3YWl0IHNlcnZlclJlcXVlc3RzLnNpbXBsZUdldFJlcXVlc3QoYXBpKTtcblx0XHRjb25zdCByZXN1bHQgPSBhd2FpdCByZXNwb25zZS5qc29uKCk7XG5cblx0XHRleHBlY3QocmVzdWx0KS50b0VxdWFsKGNvcnJlY3QpO1xuXHR9KTtcbn0pO1xuIl19