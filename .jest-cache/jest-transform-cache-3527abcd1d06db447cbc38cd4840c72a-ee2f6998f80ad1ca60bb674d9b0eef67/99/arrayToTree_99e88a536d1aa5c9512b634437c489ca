7689cba2c0fafbe796910fbfc29b44c8
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = arrayToTree;

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { keys.push.apply(keys, Object.getOwnPropertySymbols(object)); } if (enumerableOnly) keys = keys.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { if (i % 2) { var source = arguments[i] != null ? arguments[i] : {}; ownKeys(source, true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(arguments[i])); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(arguments[i], key)); }); } } return target; }

function arrayToTree(items) {
  var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {
    id: 'key',
    parentId: 'parentId'
  };
  var rootItems = [];
  var lookup = {};

  for (var i = 0, _items = items; i < _items.length; i++) {
    var item = _items[i];
    var itemId = item[config.id];
    var parentId = item[config.parentId];

    if (!Object.prototype.hasOwnProperty.call(lookup, itemId)) {
      lookup[itemId] = {
        data: null,
        children: []
      };
    }

    lookup[itemId].data = item;
    var treeItem = lookup[itemId];

    if (parentId === null || parentId === '' || !parentId) {
      rootItems.push(treeItem);
    } else {
      if (!Object.prototype.hasOwnProperty.call(lookup, parentId)) {
        lookup[parentId] = {
          data: null,
          children: []
        };
      }

      lookup[parentId].children.push(treeItem);
    }
  }

  var unnestData = function unnestData(item) {
    return _objectSpread({}, item.data, {
      children: item.children && item.children.length ? item.children.map(unnestData) : []
    });
  };

  var removeChildrenProp = function removeChildrenProp(_ref) {
    var children = _ref.children,
        rest = (0, _objectWithoutProperties2["default"])(_ref, ["children"]);
    return children.length === 0 ? _objectSpread({}, rest) : _objectSpread({
      children: children.map(removeChildrenProp)
    }, rest);
  };

  var niceFormat = rootItems.map(unnestData).map(removeChildrenProp);
  return {
    rootItems: niceFormat,
    lookup: lookup
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFycmF5VG9UcmVlLmpzIl0sIm5hbWVzIjpbImFycmF5VG9UcmVlIiwiaXRlbXMiLCJjb25maWciLCJpZCIsInBhcmVudElkIiwicm9vdEl0ZW1zIiwibG9va3VwIiwiaSIsIl9pdGVtcyIsImxlbmd0aCIsIml0ZW0iLCJpdGVtSWQiLCJPYmplY3QiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJkYXRhIiwiY2hpbGRyZW4iLCJ0cmVlSXRlbSIsInB1c2giLCJ1bm5lc3REYXRhIiwibWFwIiwicmVtb3ZlQ2hpbGRyZW5Qcm9wIiwicmVzdCIsIm5pY2VGb3JtYXQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQWUsU0FBU0EsV0FBVCxDQUNkQyxLQURjLEVBR2I7QUFBQSxNQUREQyxNQUNDLHVFQURRO0FBQUNDLElBQUFBLEVBQUUsRUFBRSxLQUFMO0FBQVlDLElBQUFBLFFBQVEsRUFBRTtBQUF0QixHQUNSO0FBQ0QsTUFBTUMsU0FBUyxHQUFHLEVBQWxCO0FBQ0EsTUFBTUMsTUFBTSxHQUFHLEVBQWY7O0FBQ0EsT0FBSyxJQUFJQyxDQUFDLEdBQUcsQ0FBUixFQUFXQyxNQUFNLEdBQUdQLEtBQXpCLEVBQWdDTSxDQUFDLEdBQUdDLE1BQU0sQ0FBQ0MsTUFBM0MsRUFBbURGLENBQUMsRUFBcEQsRUFBd0Q7QUFDdkQsUUFBTUcsSUFBSSxHQUFHRixNQUFNLENBQUNELENBQUQsQ0FBbkI7QUFDQSxRQUFNSSxNQUFNLEdBQUdELElBQUksQ0FBQ1IsTUFBTSxDQUFDQyxFQUFSLENBQW5CO0FBQ0EsUUFBTUMsUUFBUSxHQUFHTSxJQUFJLENBQUNSLE1BQU0sQ0FBQ0UsUUFBUixDQUFyQjs7QUFFQSxRQUFJLENBQUNRLE1BQU0sQ0FBQ0MsU0FBUCxDQUFpQkMsY0FBakIsQ0FBZ0NDLElBQWhDLENBQXFDVCxNQUFyQyxFQUE2Q0ssTUFBN0MsQ0FBTCxFQUEyRDtBQUMxREwsTUFBQUEsTUFBTSxDQUFDSyxNQUFELENBQU4sR0FBaUI7QUFBQ0ssUUFBQUEsSUFBSSxFQUFFLElBQVA7QUFBYUMsUUFBQUEsUUFBUSxFQUFFO0FBQXZCLE9BQWpCO0FBQ0E7O0FBQ0RYLElBQUFBLE1BQU0sQ0FBQ0ssTUFBRCxDQUFOLENBQWVLLElBQWYsR0FBc0JOLElBQXRCO0FBQ0EsUUFBTVEsUUFBUSxHQUFHWixNQUFNLENBQUNLLE1BQUQsQ0FBdkI7O0FBQ0EsUUFBSVAsUUFBUSxLQUFLLElBQWIsSUFBcUJBLFFBQVEsS0FBSyxFQUFsQyxJQUF3QyxDQUFDQSxRQUE3QyxFQUF1RDtBQUN0REMsTUFBQUEsU0FBUyxDQUFDYyxJQUFWLENBQWVELFFBQWY7QUFDQSxLQUZELE1BRU87QUFDTixVQUFJLENBQUNOLE1BQU0sQ0FBQ0MsU0FBUCxDQUFpQkMsY0FBakIsQ0FBZ0NDLElBQWhDLENBQXFDVCxNQUFyQyxFQUE2Q0YsUUFBN0MsQ0FBTCxFQUE2RDtBQUM1REUsUUFBQUEsTUFBTSxDQUFDRixRQUFELENBQU4sR0FBbUI7QUFBQ1ksVUFBQUEsSUFBSSxFQUFFLElBQVA7QUFBYUMsVUFBQUEsUUFBUSxFQUFFO0FBQXZCLFNBQW5CO0FBQ0E7O0FBQ0RYLE1BQUFBLE1BQU0sQ0FBQ0YsUUFBRCxDQUFOLENBQWlCYSxRQUFqQixDQUEwQkUsSUFBMUIsQ0FBK0JELFFBQS9CO0FBQ0E7QUFDRDs7QUFDRCxNQUFNRSxVQUFVLEdBQUcsU0FBYkEsVUFBYSxDQUFBVixJQUFJLEVBQUk7QUFDMUIsNkJBQ0lBLElBQUksQ0FBQ00sSUFEVDtBQUVDQyxNQUFBQSxRQUFRLEVBQ1BQLElBQUksQ0FBQ08sUUFBTCxJQUFpQlAsSUFBSSxDQUFDTyxRQUFMLENBQWNSLE1BQS9CLEdBQ0dDLElBQUksQ0FBQ08sUUFBTCxDQUFjSSxHQUFkLENBQWtCRCxVQUFsQixDQURILEdBRUc7QUFMTDtBQU9BLEdBUkQ7O0FBU0EsTUFBTUUsa0JBQWtCLEdBQUcsU0FBckJBLGtCQUFxQixPQUF5QjtBQUFBLFFBQXZCTCxRQUF1QixRQUF2QkEsUUFBdUI7QUFBQSxRQUFWTSxJQUFVO0FBQ25ELFdBQU9OLFFBQVEsQ0FBQ1IsTUFBVCxLQUFvQixDQUFwQixxQkFDQWMsSUFEQTtBQUVITixNQUFBQSxRQUFRLEVBQUVBLFFBQVEsQ0FBQ0ksR0FBVCxDQUFhQyxrQkFBYjtBQUZQLE9BRTRDQyxJQUY1QyxDQUFQO0FBR0EsR0FKRDs7QUFLQSxNQUFJQyxVQUFVLEdBQUduQixTQUFTLENBQUNnQixHQUFWLENBQWNELFVBQWQsRUFBMEJDLEdBQTFCLENBQThCQyxrQkFBOUIsQ0FBakI7QUFDQSxTQUFPO0FBQ05qQixJQUFBQSxTQUFTLEVBQUVtQixVQURMO0FBRU5sQixJQUFBQSxNQUFNLEVBQU5BO0FBRk0sR0FBUDtBQUlBIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYXJyYXlUb1RyZWUoXG5cdGl0ZW1zLFxuXHRjb25maWcgPSB7aWQ6ICdrZXknLCBwYXJlbnRJZDogJ3BhcmVudElkJ31cbikge1xuXHRjb25zdCByb290SXRlbXMgPSBbXTtcblx0Y29uc3QgbG9va3VwID0ge307XG5cdGZvciAobGV0IGkgPSAwLCBfaXRlbXMgPSBpdGVtczsgaSA8IF9pdGVtcy5sZW5ndGg7IGkrKykge1xuXHRcdGNvbnN0IGl0ZW0gPSBfaXRlbXNbaV07XG5cdFx0Y29uc3QgaXRlbUlkID0gaXRlbVtjb25maWcuaWRdO1xuXHRcdGNvbnN0IHBhcmVudElkID0gaXRlbVtjb25maWcucGFyZW50SWRdO1xuXG5cdFx0aWYgKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobG9va3VwLCBpdGVtSWQpKSB7XG5cdFx0XHRsb29rdXBbaXRlbUlkXSA9IHtkYXRhOiBudWxsLCBjaGlsZHJlbjogW119O1xuXHRcdH1cblx0XHRsb29rdXBbaXRlbUlkXS5kYXRhID0gaXRlbTtcblx0XHRjb25zdCB0cmVlSXRlbSA9IGxvb2t1cFtpdGVtSWRdO1xuXHRcdGlmIChwYXJlbnRJZCA9PT0gbnVsbCB8fCBwYXJlbnRJZCA9PT0gJycgfHwgIXBhcmVudElkKSB7XG5cdFx0XHRyb290SXRlbXMucHVzaCh0cmVlSXRlbSk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGlmICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGxvb2t1cCwgcGFyZW50SWQpKSB7XG5cdFx0XHRcdGxvb2t1cFtwYXJlbnRJZF0gPSB7ZGF0YTogbnVsbCwgY2hpbGRyZW46IFtdfTtcblx0XHRcdH1cblx0XHRcdGxvb2t1cFtwYXJlbnRJZF0uY2hpbGRyZW4ucHVzaCh0cmVlSXRlbSk7XG5cdFx0fVxuXHR9XG5cdGNvbnN0IHVubmVzdERhdGEgPSBpdGVtID0+IHtcblx0XHRyZXR1cm4ge1xuXHRcdFx0Li4uaXRlbS5kYXRhLFxuXHRcdFx0Y2hpbGRyZW46XG5cdFx0XHRcdGl0ZW0uY2hpbGRyZW4gJiYgaXRlbS5jaGlsZHJlbi5sZW5ndGhcblx0XHRcdFx0XHQ/IGl0ZW0uY2hpbGRyZW4ubWFwKHVubmVzdERhdGEpXG5cdFx0XHRcdFx0OiBbXVxuXHRcdH07XG5cdH07XG5cdGNvbnN0IHJlbW92ZUNoaWxkcmVuUHJvcCA9ICh7Y2hpbGRyZW4sIC4uLnJlc3R9KSA9PiB7XG5cdFx0cmV0dXJuIGNoaWxkcmVuLmxlbmd0aCA9PT0gMFxuXHRcdFx0PyB7Li4ucmVzdH1cblx0XHRcdDoge2NoaWxkcmVuOiBjaGlsZHJlbi5tYXAocmVtb3ZlQ2hpbGRyZW5Qcm9wKSwgLi4ucmVzdH07XG5cdH07XG5cdGxldCBuaWNlRm9ybWF0ID0gcm9vdEl0ZW1zLm1hcCh1bm5lc3REYXRhKS5tYXAocmVtb3ZlQ2hpbGRyZW5Qcm9wKTtcblx0cmV0dXJuIHtcblx0XHRyb290SXRlbXM6IG5pY2VGb3JtYXQsXG5cdFx0bG9va3VwXG5cdH07XG59XG4iXX0=