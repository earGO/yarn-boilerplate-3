{"version":3,"sources":["weather-duck.js"],"names":["loadWeatherData","initialState","loading","stateSelector","state","name","weatherServiceSelector","weatherData","selectors","url","api","serverRequests","simpleGetRequest","data","serviceActions","weatherLoaded","sagas","getWeatherModule","id","reducerMap","weatherService","middlewares","logger"],"mappings":";;;;;;;;;;;;;;AAAA;;AAKA;;AACA;;AACA;;AACA;;;;;;;;wBAwBUA,e;;AAtBV,IAAMC,YAAY,GAAG;AACpBC,EAAAA,OAAO,EAAE;AADW,CAArB;;AAIA,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAAAC,KAAK;AAAA,SAAIA,KAAK,CAACC,oBAAD,CAAL,IAAeJ,YAAnB;AAAA,CAA3B;;AACA,IAAMK,sBAAsB,GAAG,SAAzBA,sBAAyB,CAAAF,KAAK;AAAA,SAAIA,KAAK,CAAC,gBAAD,CAAL,IAA2B,EAA/B;AAAA,CAApC;;AAEA,IAAMF,OAAO,GAAG,8BACfC,aADe,EAEf,UAAAC,KAAK;AAAA,SAAIA,KAAK,CAACF,OAAV;AAAA,CAFU,CAAhB;AAKA,IAAMK,WAAW,GAAG,8BACnBD,sBADmB,EAEnB,UAAAF,KAAK;AAAA,SAAIA,KAAJ;AAAA,CAFc,CAApB;AAKA,IAAMI,SAAS,GAAG;AACjBN,EAAAA,OAAO,EAAPA,OADiB;AAEjBK,EAAAA,WAAW,EAAXA;AAFiB,CAAlB;;;AAKA,SAAUP,eAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACOS,UAAAA,GADP,GACaC,mBADb;AAAA;AAAA,iBAGoB,mBAAKC,sBAAeC,gBAApB,EAAsCH,GAAtC,CAHpB;;AAAA;AAGOI,UAAAA,IAHP;AAAA;AAAA,iBAIO,kBAAIC,wBAAeC,aAAf,CAA6BF,IAA7B,CAAJ,CAJP;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAOA,IAAMG,KAAK,GAAG;AACbhB,EAAAA,eAAe,EAAfA;AADa,CAAd;;;AAMO,SAASiB,gBAAT,GAA4B;AAClC,SAAO;AACN;AACAC,IAAAA,EAAE,EAAE,SAFE;AAGN;AACAC,IAAAA,UAAU,sBACRC,2BAAef,IADP,EACce,0BADd,CAJJ;AAONC,IAAAA,WAAW,EAAE,CAACC,mBAAD,CAPP;AAQN;AACA;AACA;AACAN,IAAAA,KAAK,EAAE,CAAChB,eAAD;AAXD,GAAP;AAaA","sourcesContent":["import weatherService, {\r\n\tactions as serviceActions,\r\n\tapi,\r\n\tname\r\n} from './weather-service';\r\nimport {createSelector} from 'reselect';\r\nimport {call, put} from 'redux-saga/effects';\r\nimport {logger} from 'redux-logger';\r\nimport {serverRequests} from '@project/utils';\r\n\r\nconst initialState = {\r\n\tloading: false\r\n};\r\n\r\nconst stateSelector = state => state[name] || initialState;\r\nconst weatherServiceSelector = state => state['weatherReducer'] || {};\r\n\r\nconst loading = createSelector(\r\n\tstateSelector,\r\n\tstate => state.loading\r\n);\r\n\r\nconst weatherData = createSelector(\r\n\tweatherServiceSelector,\r\n\tstate => state\r\n);\r\n\r\nconst selectors = {\r\n\tloading,\r\n\tweatherData\r\n};\r\n\r\nfunction* loadWeatherData() {\r\n\tconst url = api;\r\n\r\n\tconst data = yield call(serverRequests.simpleGetRequest, url);\r\n\tyield put(serviceActions.weatherLoaded(data));\r\n}\r\n\r\nconst sagas = {\r\n\tloadWeatherData\r\n};\r\n\r\nexport {name, selectors, sagas};\r\n\r\nexport function getWeatherModule() {\r\n\treturn {\r\n\t\t// Unique id of the module\r\n\t\tid: 'weather',\r\n\t\t// Maps the Store key to the reducer\r\n\t\treducerMap: {\r\n\t\t\t[weatherService.name]: weatherService,\r\n\t\t},\r\n\t\tmiddlewares: [logger],\r\n\t\t// This module uses redux-saga middleware\r\n\t\t// This property will be be used by the SagaExtension\r\n\t\t// to run sagas for the moduleD\r\n\t\tsagas: [loadWeatherData]\r\n\t};\r\n}\r\n"]}