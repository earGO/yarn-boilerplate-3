79d525811a289bd12e906371717aceee
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.simpleGetRequest = void 0;

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

var simpleGetRequest =
/*#__PURE__*/
function () {
  var _ref = _asyncToGenerator(
  /*#__PURE__*/
  regeneratorRuntime.mark(function _callee(url) {
    var response, data, err;
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.prev = 0;
            _context.next = 3;
            return fetch(url);

          case 3:
            response = _context.sent;
            data = response.json();
            return _context.abrupt("return", data);

          case 8:
            _context.prev = 8;
            _context.t0 = _context["catch"](0);
            err = {
              error: 'error fetching with simpleGetRequest from serverRequests in Utils',
              body: _context.t0
            };
            return _context.abrupt("return", err);

          case 12:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, this, [[0, 8]]);
  }));

  return function simpleGetRequest(_x) {
    return _ref.apply(this, arguments);
  };
}();

exports.simpleGetRequest = simpleGetRequest;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImdldFJlcXVlc3RzLmpzIl0sIm5hbWVzIjpbInNpbXBsZUdldFJlcXVlc3QiLCJ1cmwiLCJmZXRjaCIsInJlc3BvbnNlIiwiZGF0YSIsImpzb24iLCJlcnIiLCJlcnJvciIsImJvZHkiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQU8sSUFBTUEsZ0JBQWdCO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSwwQkFBRyxpQkFBTUMsR0FBTjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsbUJBRVBDLEtBQUssQ0FBQ0QsR0FBRCxDQUZFOztBQUFBO0FBRXhCRSxZQUFBQSxRQUZ3QjtBQUd4QkMsWUFBQUEsSUFId0IsR0FHakJELFFBQVEsQ0FBQ0UsSUFBVCxFQUhpQjtBQUFBLDZDQUl2QkQsSUFKdUI7O0FBQUE7QUFBQTtBQUFBO0FBTXhCRSxZQUFBQSxHQU53QixHQU1sQjtBQUNYQyxjQUFBQSxLQUFLLEVBQ0osbUVBRlU7QUFHWEMsY0FBQUEsSUFBSTtBQUhPLGFBTmtCO0FBQUEsNkNBV3ZCRixHQVh1Qjs7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxHQUFIOztBQUFBLGtCQUFoQk4sZ0JBQWdCO0FBQUE7QUFBQTtBQUFBLEdBQXRCIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNvbnN0IHNpbXBsZUdldFJlcXVlc3QgPSBhc3luYyB1cmwgPT4ge1xyXG5cdHRyeSB7XHJcblx0XHRjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKHVybCk7XHJcblx0XHRjb25zdCBkYXRhID0gcmVzcG9uc2UuanNvbigpO1xyXG5cdFx0cmV0dXJuIGRhdGE7XHJcblx0fSBjYXRjaCAoZXJyb3IpIHtcclxuXHRcdGNvbnN0IGVyciA9IHtcclxuXHRcdFx0ZXJyb3I6XHJcblx0XHRcdFx0J2Vycm9yIGZldGNoaW5nIHdpdGggc2ltcGxlR2V0UmVxdWVzdCBmcm9tIHNlcnZlclJlcXVlc3RzIGluIFV0aWxzJyxcclxuXHRcdFx0Ym9keTogZXJyb3JcclxuXHRcdH07XHJcblx0XHRyZXR1cm4gZXJyO1xyXG5cdH1cclxufTtcclxuIl19