8d0ba385fbd16beb11aac6afe86703c6
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _getRequests = require("../getRequests");

var _ = _interopRequireDefault(require("../."));

/**
 * we gonna test if this util returns expected call from mock api,
 * and if it returns error, when api URL is wrong
 * */
var api = 'http://localhost:3000/user';
var apiWrong = 'http://localhost:3200/wrong';
var correct = {
  id: 'mr2w3s0m3',
  name: 'Barney',
  lastname: 'Stinson'
};
describe('Test simpleGetRequest from server requests in utils', function () {
  test('returns correct value from correct api',
  /*#__PURE__*/
  (0, _asyncToGenerator2["default"])(
  /*#__PURE__*/
  _regenerator["default"].mark(function _callee() {
    var result;
    return _regenerator["default"].wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return (0, _getRequests.simpleGetRequest)(api);

          case 2:
            result = _context.sent;
            expect(result).toStrictEqual(correct);

          case 4:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, this);
  })));
  test('the fetch fails with an error if empty',
  /*#__PURE__*/
  (0, _asyncToGenerator2["default"])(
  /*#__PURE__*/
  _regenerator["default"].mark(function _callee2() {
    var result;
    return _regenerator["default"].wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            _context2.next = 2;
            return (0, _getRequests.simpleGetRequest)(apiWrong);

          case 2:
            result = _context2.sent;
            expect(Object.keys(result)).toStrictEqual(['error', 'body']);

          case 4:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2, this);
  })));
});
describe('Test serverRequests imports and exports serverRequests utils', function () {
  test('imports simpleRequestApi',
  /*#__PURE__*/
  (0, _asyncToGenerator2["default"])(
  /*#__PURE__*/
  _regenerator["default"].mark(function _callee3() {
    var result;
    return _regenerator["default"].wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            _context3.next = 2;
            return _["default"].simpleGetRequest(api);

          case 2:
            result = _context3.sent;
            expect(result).toStrictEqual(correct);

          case 4:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3, this);
  })));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImdldFJlcXVlc3RzLnRlc3QuanMiXSwibmFtZXMiOlsiYXBpIiwiYXBpV3JvbmciLCJjb3JyZWN0IiwiaWQiLCJuYW1lIiwibGFzdG5hbWUiLCJkZXNjcmliZSIsInRlc3QiLCJyZXN1bHQiLCJleHBlY3QiLCJ0b1N0cmljdEVxdWFsIiwiT2JqZWN0Iiwia2V5cyIsInNlcnZlclJlcXVlc3RzIiwic2ltcGxlR2V0UmVxdWVzdCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFFQTs7OztBQUtBLElBQU1BLEdBQUcsR0FBRyw0QkFBWjtBQUNBLElBQU1DLFFBQVEsR0FBRyw2QkFBakI7QUFDQSxJQUFNQyxPQUFPLEdBQUc7QUFDZkMsRUFBQUEsRUFBRSxFQUFFLFdBRFc7QUFFZkMsRUFBQUEsSUFBSSxFQUFFLFFBRlM7QUFHZkMsRUFBQUEsUUFBUSxFQUFFO0FBSEssQ0FBaEI7QUFNQUMsUUFBUSxDQUFDLHFEQUFELEVBQXdELFlBQU07QUFDckVDLEVBQUFBLElBQUksQ0FBQyx3Q0FBRDtBQUFBO0FBQUE7QUFBQTtBQUFBLCtCQUEyQztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLG1CQUN6QixtQ0FBaUJQLEdBQWpCLENBRHlCOztBQUFBO0FBQ3hDUSxZQUFBQSxNQUR3QztBQUU5Q0MsWUFBQUEsTUFBTSxDQUFDRCxNQUFELENBQU4sQ0FBZUUsYUFBZixDQUE2QlIsT0FBN0I7O0FBRjhDO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEdBQTNDLEdBQUo7QUFJQUssRUFBQUEsSUFBSSxDQUFDLHdDQUFEO0FBQUE7QUFBQTtBQUFBO0FBQUEsK0JBQTJDO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsbUJBQ3pCLG1DQUFpQk4sUUFBakIsQ0FEeUI7O0FBQUE7QUFDeENPLFlBQUFBLE1BRHdDO0FBRTlDQyxZQUFBQSxNQUFNLENBQUNFLE1BQU0sQ0FBQ0MsSUFBUCxDQUFZSixNQUFaLENBQUQsQ0FBTixDQUE0QkUsYUFBNUIsQ0FBMEMsQ0FBQyxPQUFELEVBQVUsTUFBVixDQUExQzs7QUFGOEM7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsR0FBM0MsR0FBSjtBQUlBLENBVE8sQ0FBUjtBQVdBSixRQUFRLENBQUMsOERBQUQsRUFBaUUsWUFBTTtBQUM5RUMsRUFBQUEsSUFBSSxDQUFDLDBCQUFEO0FBQUE7QUFBQTtBQUFBO0FBQUEsK0JBQTZCO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsbUJBQ1hNLGFBQWVDLGdCQUFmLENBQWdDZCxHQUFoQyxDQURXOztBQUFBO0FBQzFCUSxZQUFBQSxNQUQwQjtBQUVoQ0MsWUFBQUEsTUFBTSxDQUFDRCxNQUFELENBQU4sQ0FBZUUsYUFBZixDQUE2QlIsT0FBN0I7O0FBRmdDO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEdBQTdCLEdBQUo7QUFJQSxDQUxPLENBQVIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge3NpbXBsZUdldFJlcXVlc3R9IGZyb20gJy4uL2dldFJlcXVlc3RzJztcclxuaW1wb3J0IHNlcnZlclJlcXVlc3RzIGZyb20gJy4uLy4nO1xyXG5cclxuLyoqXHJcbiAqIHdlIGdvbm5hIHRlc3QgaWYgdGhpcyB1dGlsIHJldHVybnMgZXhwZWN0ZWQgY2FsbCBmcm9tIG1vY2sgYXBpLFxyXG4gKiBhbmQgaWYgaXQgcmV0dXJucyBlcnJvciwgd2hlbiBhcGkgVVJMIGlzIHdyb25nXHJcbiAqICovXHJcblxyXG5jb25zdCBhcGkgPSAnaHR0cDovL2xvY2FsaG9zdDozMDAwL3VzZXInO1xyXG5jb25zdCBhcGlXcm9uZyA9ICdodHRwOi8vbG9jYWxob3N0OjMyMDAvd3JvbmcnO1xyXG5jb25zdCBjb3JyZWN0ID0ge1xyXG5cdGlkOiAnbXIydzNzMG0zJyxcclxuXHRuYW1lOiAnQmFybmV5JyxcclxuXHRsYXN0bmFtZTogJ1N0aW5zb24nXHJcbn07XHJcblxyXG5kZXNjcmliZSgnVGVzdCBzaW1wbGVHZXRSZXF1ZXN0IGZyb20gc2VydmVyIHJlcXVlc3RzIGluIHV0aWxzJywgKCkgPT4ge1xyXG5cdHRlc3QoJ3JldHVybnMgY29ycmVjdCB2YWx1ZSBmcm9tIGNvcnJlY3QgYXBpJywgYXN5bmMgKCkgPT4ge1xyXG5cdFx0Y29uc3QgcmVzdWx0ID0gYXdhaXQgc2ltcGxlR2V0UmVxdWVzdChhcGkpO1xyXG5cdFx0ZXhwZWN0KHJlc3VsdCkudG9TdHJpY3RFcXVhbChjb3JyZWN0KTtcclxuXHR9KTtcclxuXHR0ZXN0KCd0aGUgZmV0Y2ggZmFpbHMgd2l0aCBhbiBlcnJvciBpZiBlbXB0eScsIGFzeW5jICgpID0+IHtcclxuXHRcdGNvbnN0IHJlc3VsdCA9IGF3YWl0IHNpbXBsZUdldFJlcXVlc3QoYXBpV3JvbmcpO1xyXG5cdFx0ZXhwZWN0KE9iamVjdC5rZXlzKHJlc3VsdCkpLnRvU3RyaWN0RXF1YWwoWydlcnJvcicsICdib2R5J10pO1xyXG5cdH0pO1xyXG59KTtcclxuXHJcbmRlc2NyaWJlKCdUZXN0IHNlcnZlclJlcXVlc3RzIGltcG9ydHMgYW5kIGV4cG9ydHMgc2VydmVyUmVxdWVzdHMgdXRpbHMnLCAoKSA9PiB7XHJcblx0dGVzdCgnaW1wb3J0cyBzaW1wbGVSZXF1ZXN0QXBpJywgYXN5bmMgKCkgPT4ge1xyXG5cdFx0Y29uc3QgcmVzdWx0ID0gYXdhaXQgc2VydmVyUmVxdWVzdHMuc2ltcGxlR2V0UmVxdWVzdChhcGkpO1xyXG5cdFx0ZXhwZWN0KHJlc3VsdCkudG9TdHJpY3RFcXVhbChjb3JyZWN0KTtcclxuXHR9KTtcclxufSk7XHJcbiJdfQ==