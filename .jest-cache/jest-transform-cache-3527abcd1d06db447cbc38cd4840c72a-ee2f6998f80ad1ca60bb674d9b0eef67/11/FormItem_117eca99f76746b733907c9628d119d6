4ff1e947514d4f04bf42b63b7f2e1017
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _designSystem = require("@ursip/design-system");

var _DynamicForm = _interopRequireDefault(require("./DynamicForm"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { keys.push.apply(keys, Object.getOwnPropertySymbols(object)); } if (enumerableOnly) keys = keys.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { if (i % 2) { var source = arguments[i] != null ? arguments[i] : {}; ownKeys(source, true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(arguments[i])); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(arguments[i], key)); }); } } return target; }

var multiplePrefix = '$';

function FormItem(_ref) {
  var name = _ref.name,
      initialValue = _ref.initialValue,
      label = _ref.label,
      _ref$options = _ref.options,
      options = _ref$options === void 0 ? {} : _ref$options,
      _ref$labelWidth = _ref.labelWidth,
      labelWidth = _ref$labelWidth === void 0 ? 128 : _ref$labelWidth,
      children = _ref.children,
      required = _ref.required,
      form = _ref.form,
      type = _ref.type,
      multiple = _ref.multiple,
      props = (0, _objectWithoutProperties2["default"])(_ref, ["name", "initialValue", "label", "options", "labelWidth", "children", "required", "form", "type", "multiple"]);
  var requiredRule = {
    required: true,
    message: 'Заполните поле ' + label
  };
  var rules = options.rules ? options.rules : [];

  var field = _react["default"].cloneElement(_react["default"].Children.only(children));

  var decoratorOptions = _objectSpread({
    initialValue: initialValue
  }, options, {
    rules: required ? rules.concat(requiredRule) : []
  });

  var renderTemplate = function renderTemplate(decorator) {
    return _react["default"].createElement(_designSystem.Form.Item, {
      required: required
    }, decorator(name, decoratorOptions)(field));
  };

  return _react["default"].createElement(_designSystem.Flex, {
    flexDirection: "column",
    mb: 2
  }, label && _react["default"].createElement(_designSystem.Box, null, label, ' ', required && _react["default"].createElement(_designSystem.Text, {
    inline: true,
    color: "error"
  }, "*")), _react["default"].createElement(_designSystem.Box, null, multiple ? _react["default"].createElement(_DynamicForm["default"], {
    form: form,
    group: multiplePrefix + name,
    renderTemplate: renderTemplate
  }) : _react["default"].createElement(_designSystem.Form.Item, {
    required: required
  }, form.getFieldDecorator(name, decoratorOptions)(field)))); // if (multiple) {
  //   return <DynamicForm form={form} group={multiplePrefix + name} renderTemplate={renderTemplate} />
  //     <Form.Item required={required} label={label} labelProps={{ mb: 1 }} mb={3}>
  //     {field}
  //   </Form.Item>
  // } else {
  // }
  // return form.getFieldDecorator(name, decoratorOptions)(field)
}

FormItem.propTypes = {
  required: _propTypes["default"].bool
};
FormItem.defaultProps = {
  required: false
};
var _default = FormItem;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkZvcm1JdGVtLmpzIl0sIm5hbWVzIjpbIm11bHRpcGxlUHJlZml4IiwiRm9ybUl0ZW0iLCJuYW1lIiwiaW5pdGlhbFZhbHVlIiwibGFiZWwiLCJvcHRpb25zIiwibGFiZWxXaWR0aCIsImNoaWxkcmVuIiwicmVxdWlyZWQiLCJmb3JtIiwidHlwZSIsIm11bHRpcGxlIiwicHJvcHMiLCJyZXF1aXJlZFJ1bGUiLCJtZXNzYWdlIiwicnVsZXMiLCJmaWVsZCIsIlJlYWN0IiwiY2xvbmVFbGVtZW50IiwiQ2hpbGRyZW4iLCJvbmx5IiwiZGVjb3JhdG9yT3B0aW9ucyIsImNvbmNhdCIsInJlbmRlclRlbXBsYXRlIiwiZGVjb3JhdG9yIiwiZ2V0RmllbGREZWNvcmF0b3IiLCJwcm9wVHlwZXMiLCJQcm9wVHlwZXMiLCJib29sIiwiZGVmYXVsdFByb3BzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0FBQUE7O0FBQ0E7O0FBQ0E7O0FBQ0E7Ozs7OztBQUNBLElBQU1BLGNBQWMsR0FBRyxHQUF2Qjs7QUFFQSxTQUFTQyxRQUFULE9BWUc7QUFBQSxNQVhEQyxJQVdDLFFBWERBLElBV0M7QUFBQSxNQVZEQyxZQVVDLFFBVkRBLFlBVUM7QUFBQSxNQVREQyxLQVNDLFFBVERBLEtBU0M7QUFBQSwwQkFSREMsT0FRQztBQUFBLE1BUkRBLE9BUUMsNkJBUlMsRUFRVDtBQUFBLDZCQVBEQyxVQU9DO0FBQUEsTUFQREEsVUFPQyxnQ0FQWSxHQU9aO0FBQUEsTUFOREMsUUFNQyxRQU5EQSxRQU1DO0FBQUEsTUFMREMsUUFLQyxRQUxEQSxRQUtDO0FBQUEsTUFKREMsSUFJQyxRQUpEQSxJQUlDO0FBQUEsTUFIREMsSUFHQyxRQUhEQSxJQUdDO0FBQUEsTUFGREMsUUFFQyxRQUZEQSxRQUVDO0FBQUEsTUFERUMsS0FDRjtBQUNELE1BQU1DLFlBQVksR0FBRztBQUFFTCxJQUFBQSxRQUFRLEVBQUUsSUFBWjtBQUFrQk0sSUFBQUEsT0FBTyxFQUFFLG9CQUFvQlY7QUFBL0MsR0FBckI7QUFDQSxNQUFNVyxLQUFLLEdBQUdWLE9BQU8sQ0FBQ1UsS0FBUixHQUFnQlYsT0FBTyxDQUFDVSxLQUF4QixHQUFnQyxFQUE5Qzs7QUFDQSxNQUFNQyxLQUFLLEdBQUdDLGtCQUFNQyxZQUFOLENBQW1CRCxrQkFBTUUsUUFBTixDQUFlQyxJQUFmLENBQW9CYixRQUFwQixDQUFuQixDQUFkOztBQUNBLE1BQU1jLGdCQUFnQjtBQUNwQmxCLElBQUFBLFlBQVksRUFBWkE7QUFEb0IsS0FFakJFLE9BRmlCO0FBR3BCVSxJQUFBQSxLQUFLLEVBQUVQLFFBQVEsR0FBR08sS0FBSyxDQUFDTyxNQUFOLENBQWFULFlBQWIsQ0FBSCxHQUFnQztBQUgzQixJQUF0Qjs7QUFLQSxNQUFNVSxjQUFjLEdBQUcsU0FBakJBLGNBQWlCLENBQUFDLFNBQVMsRUFBSTtBQUNsQyxXQUFPLGdDQUFDLGtCQUFELENBQU0sSUFBTjtBQUFXLE1BQUEsUUFBUSxFQUFFaEI7QUFBckIsT0FBZ0NnQixTQUFTLENBQUN0QixJQUFELEVBQU9tQixnQkFBUCxDQUFULENBQWtDTCxLQUFsQyxDQUFoQyxDQUFQO0FBQ0QsR0FGRDs7QUFJQSxTQUNFLGdDQUFDLGtCQUFEO0FBQU0sSUFBQSxhQUFhLEVBQUMsUUFBcEI7QUFBNkIsSUFBQSxFQUFFLEVBQUU7QUFBakMsS0FDR1osS0FBSyxJQUNKLGdDQUFDLGlCQUFELFFBQ0dBLEtBREgsRUFDVSxHQURWLEVBRUdJLFFBQVEsSUFDUCxnQ0FBQyxrQkFBRDtBQUFNLElBQUEsTUFBTSxNQUFaO0FBQWEsSUFBQSxLQUFLLEVBQUM7QUFBbkIsU0FISixDQUZKLEVBV0UsZ0NBQUMsaUJBQUQsUUFDR0csUUFBUSxHQUNQLGdDQUFDLHVCQUFEO0FBQWEsSUFBQSxJQUFJLEVBQUVGLElBQW5CO0FBQXlCLElBQUEsS0FBSyxFQUFFVCxjQUFjLEdBQUdFLElBQWpEO0FBQXVELElBQUEsY0FBYyxFQUFFcUI7QUFBdkUsSUFETyxHQUdQLGdDQUFDLGtCQUFELENBQU0sSUFBTjtBQUFXLElBQUEsUUFBUSxFQUFFZjtBQUFyQixLQUFnQ0MsSUFBSSxDQUFDZ0IsaUJBQUwsQ0FBdUJ2QixJQUF2QixFQUE2Qm1CLGdCQUE3QixFQUErQ0wsS0FBL0MsQ0FBaEMsQ0FKSixDQVhGLENBREYsQ0FiQyxDQW1DRDtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0Q7O0FBRURmLFFBQVEsQ0FBQ3lCLFNBQVQsR0FBcUI7QUFDbkJsQixFQUFBQSxRQUFRLEVBQUVtQixzQkFBVUM7QUFERCxDQUFyQjtBQUlBM0IsUUFBUSxDQUFDNEIsWUFBVCxHQUF3QjtBQUN0QnJCLEVBQUFBLFFBQVEsRUFBRTtBQURZLENBQXhCO2VBSWVQLFEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnXHJcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcydcclxuaW1wb3J0IHsgRm9ybSwgRmxleCwgQm94LCBUZXh0IH0gZnJvbSAnQHVyc2lwL2Rlc2lnbi1zeXN0ZW0nXHJcbmltcG9ydCBEeW5hbWljRm9ybSBmcm9tICcuL0R5bmFtaWNGb3JtJ1xyXG5jb25zdCBtdWx0aXBsZVByZWZpeCA9ICckJ1xyXG5cclxuZnVuY3Rpb24gRm9ybUl0ZW0oe1xyXG4gIG5hbWUsXHJcbiAgaW5pdGlhbFZhbHVlLFxyXG4gIGxhYmVsLFxyXG4gIG9wdGlvbnMgPSB7fSxcclxuICBsYWJlbFdpZHRoID0gMTI4LFxyXG4gIGNoaWxkcmVuLFxyXG4gIHJlcXVpcmVkLFxyXG4gIGZvcm0sXHJcbiAgdHlwZSxcclxuICBtdWx0aXBsZSxcclxuICAuLi5wcm9wc1xyXG59KSB7XHJcbiAgY29uc3QgcmVxdWlyZWRSdWxlID0geyByZXF1aXJlZDogdHJ1ZSwgbWVzc2FnZTogJ9CX0LDQv9C+0LvQvdC40YLQtSDQv9C+0LvQtSAnICsgbGFiZWwgfVxyXG4gIGNvbnN0IHJ1bGVzID0gb3B0aW9ucy5ydWxlcyA/IG9wdGlvbnMucnVsZXMgOiBbXVxyXG4gIGNvbnN0IGZpZWxkID0gUmVhY3QuY2xvbmVFbGVtZW50KFJlYWN0LkNoaWxkcmVuLm9ubHkoY2hpbGRyZW4pKVxyXG4gIGNvbnN0IGRlY29yYXRvck9wdGlvbnMgPSB7XHJcbiAgICBpbml0aWFsVmFsdWUsXHJcbiAgICAuLi5vcHRpb25zLFxyXG4gICAgcnVsZXM6IHJlcXVpcmVkID8gcnVsZXMuY29uY2F0KHJlcXVpcmVkUnVsZSkgOiBbXSxcclxuICB9XHJcbiAgY29uc3QgcmVuZGVyVGVtcGxhdGUgPSBkZWNvcmF0b3IgPT4ge1xyXG4gICAgcmV0dXJuIDxGb3JtLkl0ZW0gcmVxdWlyZWQ9e3JlcXVpcmVkfT57ZGVjb3JhdG9yKG5hbWUsIGRlY29yYXRvck9wdGlvbnMpKGZpZWxkKX08L0Zvcm0uSXRlbT5cclxuICB9XHJcblxyXG4gIHJldHVybiAoXHJcbiAgICA8RmxleCBmbGV4RGlyZWN0aW9uPVwiY29sdW1uXCIgbWI9ezJ9PlxyXG4gICAgICB7bGFiZWwgJiYgKFxyXG4gICAgICAgIDxCb3g+XHJcbiAgICAgICAgICB7bGFiZWx9eycgJ31cclxuICAgICAgICAgIHtyZXF1aXJlZCAmJiAoXHJcbiAgICAgICAgICAgIDxUZXh0IGlubGluZSBjb2xvcj1cImVycm9yXCI+XHJcbiAgICAgICAgICAgICAgKlxyXG4gICAgICAgICAgICA8L1RleHQ+XHJcbiAgICAgICAgICApfVxyXG4gICAgICAgIDwvQm94PlxyXG4gICAgICApfVxyXG4gICAgICA8Qm94PlxyXG4gICAgICAgIHttdWx0aXBsZSA/IChcclxuICAgICAgICAgIDxEeW5hbWljRm9ybSBmb3JtPXtmb3JtfSBncm91cD17bXVsdGlwbGVQcmVmaXggKyBuYW1lfSByZW5kZXJUZW1wbGF0ZT17cmVuZGVyVGVtcGxhdGV9IC8+XHJcbiAgICAgICAgKSA6IChcclxuICAgICAgICAgIDxGb3JtLkl0ZW0gcmVxdWlyZWQ9e3JlcXVpcmVkfT57Zm9ybS5nZXRGaWVsZERlY29yYXRvcihuYW1lLCBkZWNvcmF0b3JPcHRpb25zKShmaWVsZCl9PC9Gb3JtLkl0ZW0+XHJcbiAgICAgICAgKX1cclxuICAgICAgPC9Cb3g+XHJcbiAgICA8L0ZsZXg+XHJcbiAgKVxyXG5cclxuICAvLyBpZiAobXVsdGlwbGUpIHtcclxuICAvLyAgIHJldHVybiA8RHluYW1pY0Zvcm0gZm9ybT17Zm9ybX0gZ3JvdXA9e211bHRpcGxlUHJlZml4ICsgbmFtZX0gcmVuZGVyVGVtcGxhdGU9e3JlbmRlclRlbXBsYXRlfSAvPlxyXG5cclxuICAvLyAgICAgPEZvcm0uSXRlbSByZXF1aXJlZD17cmVxdWlyZWR9IGxhYmVsPXtsYWJlbH0gbGFiZWxQcm9wcz17eyBtYjogMSB9fSBtYj17M30+XHJcbiAgLy8gICAgIHtmaWVsZH1cclxuICAvLyAgIDwvRm9ybS5JdGVtPlxyXG4gIC8vIH0gZWxzZSB7XHJcbiAgLy8gfVxyXG5cclxuICAvLyByZXR1cm4gZm9ybS5nZXRGaWVsZERlY29yYXRvcihuYW1lLCBkZWNvcmF0b3JPcHRpb25zKShmaWVsZClcclxufVxyXG5cclxuRm9ybUl0ZW0ucHJvcFR5cGVzID0ge1xyXG4gIHJlcXVpcmVkOiBQcm9wVHlwZXMuYm9vbCxcclxufVxyXG5cclxuRm9ybUl0ZW0uZGVmYXVsdFByb3BzID0ge1xyXG4gIHJlcXVpcmVkOiBmYWxzZSxcclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgRm9ybUl0ZW1cclxuIl19