{"version":3,"sources":["getRequests.test.js"],"names":["api","apiWrong","correct","id","name","lastname","describe","test","result","expect","toStrictEqual","Object","keys","it","fetchMock","get","serverRequests","simpleGetRequest","response","toEqual"],"mappings":";;;;;;;;AAAA;;AACA;;AACA;;AAEA;;;;AAKA,IAAMA,GAAG,GAAG,4BAAZ;AACA,IAAMC,QAAQ,GAAG,6BAAjB;AACA,IAAMC,OAAO,GAAG;AACfC,EAAAA,EAAE,EAAE,WADW;AAEfC,EAAAA,IAAI,EAAE,QAFS;AAGfC,EAAAA,QAAQ,EAAE;AAHK,CAAhB;AAMAC,QAAQ,CAAC,qDAAD,EAAwD,YAAM;AACrEC,EAAAA,IAAI,CAAC,wCAAD;AAAA;AAAA;AAAA;AAAA,+BAA2C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACzB,mCAAiBP,GAAjB,CADyB;;AAAA;AACxCQ,YAAAA,MADwC;AAE9CC,YAAAA,MAAM,CAACD,MAAD,CAAN,CAAeE,aAAf,CAA6BR,OAA7B;;AAF8C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAA3C,GAAJ;AAIAK,EAAAA,IAAI,CAAC,wCAAD;AAAA;AAAA;AAAA;AAAA,+BAA2C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACzB,mCAAiBN,QAAjB,CADyB;;AAAA;AACxCO,YAAAA,MADwC;AAE9CC,YAAAA,MAAM,CAACE,MAAM,CAACC,IAAP,CAAYJ,MAAZ,CAAD,CAAN,CAA4BE,aAA5B,CAA0C,CAAC,OAAD,EAAU,MAAV,CAA1C;;AAF8C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAA3C,GAAJ;AAIA,CATO,CAAR;AAWAJ,QAAQ,CAAC,8DAAD,EAAiE,YAAM;AAC9EO,EAAAA,EAAE,CAAC,qBAAD;AAAA;AAAA;AAAA;AAAA,+BAAwB;AAAA;AAAA;AAAA;AAAA;AAAA;AACzBC,kCAAUC,GAAV,CAAcf,GAAd,EAAmBE,OAAnB;;AADyB;AAAA,mBAGFc,aAAeC,gBAAf,CAAgCjB,GAAhC,CAHE;;AAAA;AAGnBkB,YAAAA,QAHmB;AAAA;AAAA,mBAIJA,QAJI;;AAAA;AAInBV,YAAAA,MAJmB;AAMzBC,YAAAA,MAAM,CAACD,MAAD,CAAN,CAAeW,OAAf,CAAuBjB,OAAvB;;AANyB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAxB,GAAF;AAQA,CATO,CAAR","sourcesContent":["import {simpleGetRequest} from '../getRequests';\nimport serverRequests from '../.';\nimport fetchMock from 'fetch-mock';\n\n/**\n * we gonna test if this util returns expected call from mock api,\n * and if it returns error, when api URL is wrong\n * */\n\nconst api = 'http://localhost:3000/user';\nconst apiWrong = 'http://localhost:3200/wrong';\nconst correct = {\n\tid: 'mr2w3s0m3',\n\tname: 'Barney',\n\tlastname: 'Stinson'\n};\n\ndescribe('Test simpleGetRequest from server requests in utils', () => {\n\ttest('returns correct value from correct api', async () => {\n\t\tconst result = await simpleGetRequest(api);\n\t\texpect(result).toStrictEqual(correct);\n\t});\n\ttest('the fetch fails with an error if empty', async () => {\n\t\tconst result = await simpleGetRequest(apiWrong);\n\t\texpect(Object.keys(result)).toStrictEqual(['error', 'body']);\n\t});\n});\n\ndescribe('Test serverRequests imports and exports serverRequests utils', () => {\n\tit('should call the api', async () => {\n\t\tfetchMock.get(api, correct);\n\n\t\tconst response = await serverRequests.simpleGetRequest(api);\n\t\tconst result = await response;\n\n\t\texpect(result).toEqual(correct);\n\t});\n});\n"]}