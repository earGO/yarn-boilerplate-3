34896c5b204975c6cdd2ef2d604e7766
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.actions = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _reduxSagaRequests = require("redux-saga-requests");

var _package = _interopRequireDefault(require("../../package.json"));

var _import = require("../../import");

var _catalog = _interopRequireDefault(require("./catalog.json"));

var _elements = _interopRequireDefault(require("./elements.json"));

var _dict = _interopRequireDefault(require("./dict.json"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { keys.push.apply(keys, Object.getOwnPropertySymbols(object)); } if (enumerableOnly) keys = keys.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { if (i % 2) { var source = arguments[i] != null ? arguments[i] : {}; ownKeys(source, true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(arguments[i])); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(arguments[i], key)); }); } } return target; }

var name = 'ursip-nsi-service';
var api = _package["default"].ru_ursip.services[name];
/* Types */

var LOAD_DICTS = "".concat(name, "/LOAD_DICTS");
var LOAD_DICT_ELEMENTS = "".concat(name, "/LOAD_DICT_ELEMENTS");
var SAVE_DICT = "".concat(name, "/SAVE_DICT");
var SAVE_DICT_ROW = "".concat(name, "/SAVE_DICT_ROW");
var MAKE_REPORT = "".concat(name, "/MAKE_REPORT");
var types = {
  LOAD_DICTS: LOAD_DICTS,
  LOAD_DICT_ELEMENTS: LOAD_DICT_ELEMENTS,
  SAVE_DICT_ROW: SAVE_DICT_ROW,
  SAVE_DICT: SAVE_DICT,
  MAKE_REPORT: MAKE_REPORT
};

function shittylize(data) {
  var _ref = data || {},
      attributes = _ref.attributes,
      hierarchy = _ref.hierarchy,
      deleted = _ref.deleted,
      transfer = _ref.transfer,
      rest = (0, _objectWithoutProperties2["default"])(_ref, ["attributes", "hierarchy", "deleted", "transfer"]);

  return _objectSpread({}, rest, {
    transfer: Number(transfer) || 0,
    context: rest.context === true || rest.context === 'SYSTEM' ? 'SYSTEM' : 'COMMON',
    deleted: Number(deleted) || 0,
    hierarchyDict: Number(hierarchy) || 0,
    metaAttrs: (attributes || []).map(function (_ref2) {
      var link = _ref2.link,
          array = _ref2.array,
          deleted = _ref2.deleted,
          required = _ref2.required,
          unique = _ref2.unique,
          type = _ref2.type,
          attr = (0, _objectWithoutProperties2["default"])(_ref2, ["link", "array", "deleted", "required", "unique", "type"]);
      return _objectSpread({}, attr, {
        typeAttr: type,
        nickDictLink: link || null,
        arrayAttr: Number(array) || 0,
        deleted: Number(deleted) || 0,
        required: Number(required) || 0,
        unique: Number(unique) || 0
      });
    })
  });
}

function shittylizeElement(data) {
  var _ref3 = data || {},
      deleted = _ref3.deleted,
      values = _ref3.values,
      rest = (0, _objectWithoutProperties2["default"])(_ref3, ["deleted", "values"]);

  return _objectSpread({}, rest, {
    deleted: Number(deleted),
    values: Object.values(values || {}).map(function (_ref4) {
      var deleted = _ref4.deleted,
          value = _ref4.value,
          nick = _ref4.nick,
          rest = (0, _objectWithoutProperties2["default"])(_ref4, ["deleted", "value", "nick"]);
      return _objectSpread({}, rest, {
        nickAttr: nick,
        deleted: Number(deleted),
        value: value || null
      });
    })
  });
}
/* Action creators */


var actions = {
  loadAllCatalogs: function loadAllCatalogs() {
    return {
      type: LOAD_DICTS,
      payload: {
        request: {
          url: "".concat(api, "/nsi/meta/dict")
        }
      },
      meta: {
        mock: function mock(requestConfig) {
          return _dict["default"];
        }
      }
    };
  },
  loadElements: function loadElements(nick) {
    return {
      type: LOAD_DICT_ELEMENTS,
      payload: {
        request: {
          url: "".concat(api, "/nsi/dict/").concat(nick)
        }
      },
      meta: {
        mock: function mock(requestConfig) {
          return _elements["default"];
        }
      }
    };
  },
  metaDictSave: function metaDictSave(dict) {
    return {
      type: SAVE_DICT,
      payload: {
        request: {
          url: "".concat(api, "/nsi/meta/dict/save"),
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify((0, _import.capitlizeObjectKeys)({
            metaDict: _objectSpread({
              transfer: 0
            }, shittylize(dict))
          }))
        }
      }
    };
  },
  saveDictRow: function saveDictRow(data, nickDict) {
    return {
      type: SAVE_DICT_ROW,
      payload: {
        request: {
          url: "".concat(api, "/nsi/dict/save"),
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify((0, _import.capitlizeObjectKeys)({
            valueDict: {
              nickDict: nickDict,
              element: [shittylizeElement(data)]
            }
          }))
        }
      }
    };
  },
  makeReport: function makeReport(nick) {
    return {
      type: MAKE_REPORT,
      payload: {
        nick: nick
      }
    };
  }
};
exports.actions = actions;

function normalize(response) {
  return (Array.isArray(response) ? response : [response]).map(function (_ref5) {
    var metaAttributes = _ref5.metaAttributes,
        metaAttrs = _ref5.metaAttrs,
        nsiMetaAttrs = _ref5.nsiMetaAttrs,
        deleted = _ref5.deleted,
        hierarchyDict = _ref5.hierarchyDict,
        transfer = _ref5.transfer,
        rest = (0, _objectWithoutProperties2["default"])(_ref5, ["metaAttributes", "metaAttrs", "nsiMetaAttrs", "deleted", "hierarchyDict", "transfer"]);
    return _objectSpread({}, rest, {
      deleted: Boolean(deleted),
      hierarchy: Boolean(hierarchyDict),
      transfer: Boolean(transfer)
    });
  });
}

function normalizeElements(elements) {
  return (elements || []).map(function (_ref6) {
    var deleted = _ref6.deleted,
        values = _ref6.values,
        id = _ref6.id,
        rest = (0, _objectWithoutProperties2["default"])(_ref6, ["deleted", "values", "id"]);
    return _objectSpread({}, rest, {
      elementId: id,
      deleted: Boolean(deleted),
      values: (0, _import.dataToEntities)('nick', values.map(function (_ref7) {
        var deleted = _ref7.deleted,
            valueAttr = _ref7.valueAttr,
            value = _ref7.value,
            rest = (0, _objectWithoutProperties2["default"])(_ref7, ["deleted", "valueAttr", "value"]);
        return _objectSpread({}, rest, {
          deleted: Boolean(deleted),
          value: value || valueAttr
        });
      }))
    });
  });
}

function normalizeAttributes(attributes) {
  return attributes.map(function (_ref8) {
    var id = _ref8.id,
        typeAttr = _ref8.typeAttr,
        arrayAttr = _ref8.arrayAttr,
        required = _ref8.required,
        deleted = _ref8.deleted,
        unique = _ref8.unique,
        nickDictLink = _ref8.nickDictLink,
        rest = (0, _objectWithoutProperties2["default"])(_ref8, ["id", "typeAttr", "arrayAttr", "required", "deleted", "unique", "nickDictLink"]);
    return _objectSpread({}, rest, {
      nick: id.nick,
      type: typeAttr,
      link: nickDictLink,
      array: Boolean(arrayAttr),
      required: Boolean(required),
      deleted: Boolean(deleted),
      unique: Boolean(unique)
    });
  });
}
/* Reducer */


var initialState = {
  catalogs: {},
  attributes: {},
  elements: {}
};

function reducer() {
  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;

  var _ref9 = arguments.length > 1 ? arguments[1] : undefined,
      type = _ref9.type,
      payload = _ref9.payload;

  switch (type) {
    case (0, _reduxSagaRequests.success)(LOAD_DICTS):
      {
        return _objectSpread({}, state, {
          catalogs: (0, _import.dataToEntities)('nick', normalize(payload.data)),
          attributes: payload.data.reduce(function (acc, _ref10) {
            var nick = _ref10.nick,
                nsiMetaAttrs = _ref10.nsiMetaAttrs;
            acc[nick] = (0, _import.dataToEntities)('nick', normalizeAttributes(nsiMetaAttrs).sort(function (a, b) {
              return a.orders - b.orders;
            }));
            return acc;
          }, {})
        });
      }

    case (0, _reduxSagaRequests.success)(SAVE_DICT):
      return _objectSpread({}, state, {
        catalogs: _objectSpread({}, state.catalogs, (0, _defineProperty2["default"])({}, payload.data.nick, normalize(payload.data)[0])),
        attributes: _objectSpread({}, state.attributes, (0, _defineProperty2["default"])({}, payload.data.nick, (0, _import.dataToEntities)('nick', normalizeAttributes(payload.data.nsiMetaAttrs))))
      });

    case (0, _reduxSagaRequests.success)(LOAD_DICT_ELEMENTS):
      return _objectSpread({}, state, {
        elements: _objectSpread({}, state.elements, (0, _defineProperty2["default"])({}, payload.data.dict.nick, (0, _import.dataToEntities)('elementId', normalizeElements(payload.data.dict.elements))))
      });

    case (0, _reduxSagaRequests.success)(SAVE_DICT_ROW):
      // console.log(payload.data)
      return _objectSpread({}, state, {
        elements: _objectSpread({}, state.elements, (0, _defineProperty2["default"])({}, payload.data.dict.nick, (0, _import.dataToEntities)('elementId', normalizeElements(payload.data.dict.elements))))
      });

    default:
      return state;
  }
}

var _default = {
  reducer: reducer,
  initialState: initialState,
  actions: actions,
  types: types,
  name: name,
  pkg: _package["default"]
};
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,