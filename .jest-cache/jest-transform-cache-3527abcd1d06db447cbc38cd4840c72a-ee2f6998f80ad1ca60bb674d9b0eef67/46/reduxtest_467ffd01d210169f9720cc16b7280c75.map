{"version":3,"sources":["redux.test.js"],"names":["error","selectors","default","weatherReducer","types","actions","name","initialMockState","mockTitle","mockData","describe","prop","hasOwnProperty","it","typeValue","expect","toBe","weatherLoaded","test","toEqual","errorAction","type","LOAD_WEATHER","payload","initialState","stateWithLoading","loading","otherCaption","stateWithWeather","weather","weatherData"],"mappings":"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","sourcesContent":["import {error} from 'redux-saga-requests';\r\nimport {selectors} from '../weather-duck';\r\nimport {\r\n\tdefault as weatherReducer,\r\n\ttypes,\r\n\tactions,\r\n\tname\r\n} from '../weather-service';\r\n\r\nconst initialMockState = {\r\n\tmockTitle: 'mockTitle',\r\n\tmockData: ['papul', 'banana', 'minion']\r\n};\r\n\r\ndescribe('Test weather service', () => {\r\n\tfor (var prop in types) {\r\n\t\tif (types.hasOwnProperty(prop)) {\r\n\t\t\tit('type format should be correct', () => {\r\n\t\t\t\tconst typeValue = name + '/' + prop;\r\n\t\t\t\texpect(types[prop]).toBe(typeValue);\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n});\r\n\r\ndescribe('Test weather service reducer', () => {\r\n\tit('should handle LOAD_WEATER', () => {\r\n\t\t// it's empty on purpose because it's just starting to fetch posts\r\n\t\texpect(\r\n\t\t\tweatherReducer([], actions.weatherLoaded({test: 'test'}))\r\n\t\t).toEqual([{test: 'test'}]);\r\n\t});\r\n\tit('should return emptyState when error', () => {\r\n\t\tconst errorAction = {\r\n\t\t\ttype: error(types.LOAD_WEATHER),\r\n\t\t\tpayload: \"if you see it reducer doesn't works\"\r\n\t\t};\r\n\t\texpect(\r\n\t\t\tweatherReducer({initialState: 'initialState'}, errorAction)\r\n\t\t).toEqual({initialState: 'initialState'});\r\n\t});\r\n});\r\n\r\ndescribe('Test weather duck selectors', () => {\r\n\tit('loading should select Loading if present in state', () => {\r\n\t\tlet stateWithLoading = {...initialMockState};\r\n\t\tstateWithLoading[name] = {loading: true, otherCaption: 'otherCaption'};\r\n\t\texpect(selectors.loading(stateWithLoading)).toEqual(true);\r\n\t});\r\n\tit('weatherData should select weatherReducer if present in state', () => {\r\n\t\tlet stateWithWeather = {...initialMockState};\r\n\t\tstateWithWeather['weatherReducer'] = {weather: 'isGood'};\r\n\t\texpect(selectors.weatherData(stateWithWeather)).toEqual({\r\n\t\t\tweather: 'isGood'\r\n\t\t});\r\n\t});\r\n\tit('loading should return false if Loading absent in state', () => {\r\n\t\texpect(selectors.loading(initialMockState)).toEqual(false);\r\n\t});\r\n\tit('weatherData should return empty object if data absent in state', () => {\r\n\t\texpect(selectors.weatherData(initialMockState)).toEqual({});\r\n\t});\r\n});\r\n"]}