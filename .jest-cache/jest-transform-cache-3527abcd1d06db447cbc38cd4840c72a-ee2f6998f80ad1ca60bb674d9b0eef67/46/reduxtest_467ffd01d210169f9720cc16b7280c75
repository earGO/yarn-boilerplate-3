6beda9ee9900939fb0ba77b3a4899b43
import { error } from 'redux-saga-requests';
import { selectors } from '../weather-duck';
import { default as weatherReducer, types, actions, name } from '../weather-service';
const initialMockState = {
  mockTitle: 'mockTitle',
  mockData: ['papul', 'banana', 'minion']
};
describe('Test weather service', () => {
  for (var prop in types) {
    if (types.hasOwnProperty(prop)) {
      it('type format should be correct', () => {
        const typeValue = name + '/' + prop;
        expect(types[prop]).toBe(typeValue);
      });
    }
  }
});
describe('Test weather service reducer', () => {
  it('should handle LOAD_WEATER', () => {
    // it's empty on purpose because it's just starting to fetch posts
    expect(weatherReducer([], actions.weatherLoaded({
      test: 'test'
    }))).toEqual([{
      test: 'test'
    }]);
  });
  it('should return emptyState when error', () => {
    const errorAction = {
      type: error(types.LOAD_WEATHER),
      payload: "if you see it reducer doesn't works"
    };
    expect(weatherReducer({
      initialState: 'initialState'
    }, errorAction)).toEqual({
      initialState: 'initialState'
    });
  });
});
describe('Test weather duck selectors', () => {
  it('loading should select Loading if present in state', () => {
    let stateWithLoading = { ...initialMockState
    };
    stateWithLoading[name] = {
      loading: true,
      otherCaption: 'otherCaption'
    };
    expect(selectors.loading(stateWithLoading)).toEqual(true);
  });
  it('weatherData should select weatherReducer if present in state', () => {
    let stateWithWeather = { ...initialMockState
    };
    stateWithWeather['weatherReducer'] = {
      weather: 'isGood'
    };
    expect(selectors.weatherData(stateWithWeather)).toEqual({
      weather: 'isGood'
    });
  });
  it('loading should return false if Loading absent in state', () => {
    expect(selectors.loading(initialMockState)).toEqual(false);
  });
  it('weatherData should return empty object if data absent in state', () => {
    expect(selectors.weatherData(initialMockState)).toEqual({});
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInJlZHV4LnRlc3QuanMiXSwibmFtZXMiOlsiZXJyb3IiLCJzZWxlY3RvcnMiLCJkZWZhdWx0Iiwid2VhdGhlclJlZHVjZXIiLCJ0eXBlcyIsImFjdGlvbnMiLCJuYW1lIiwiaW5pdGlhbE1vY2tTdGF0ZSIsIm1vY2tUaXRsZSIsIm1vY2tEYXRhIiwiZGVzY3JpYmUiLCJwcm9wIiwiaGFzT3duUHJvcGVydHkiLCJpdCIsInR5cGVWYWx1ZSIsImV4cGVjdCIsInRvQmUiLCJ3ZWF0aGVyTG9hZGVkIiwidGVzdCIsInRvRXF1YWwiLCJlcnJvckFjdGlvbiIsInR5cGUiLCJMT0FEX1dFQVRIRVIiLCJwYXlsb2FkIiwiaW5pdGlhbFN0YXRlIiwic3RhdGVXaXRoTG9hZGluZyIsImxvYWRpbmciLCJvdGhlckNhcHRpb24iLCJzdGF0ZVdpdGhXZWF0aGVyIiwid2VhdGhlciIsIndlYXRoZXJEYXRhIl0sIm1hcHBpbmdzIjoiQUFBQSxTQUFRQSxLQUFSLFFBQW9CLHFCQUFwQjtBQUNBLFNBQVFDLFNBQVIsUUFBd0IsaUJBQXhCO0FBQ0EsU0FDQ0MsT0FBTyxJQUFJQyxjQURaLEVBRUNDLEtBRkQsRUFHQ0MsT0FIRCxFQUlDQyxJQUpELFFBS08sb0JBTFA7QUFPQSxNQUFNQyxnQkFBZ0IsR0FBRztBQUN4QkMsRUFBQUEsU0FBUyxFQUFFLFdBRGE7QUFFeEJDLEVBQUFBLFFBQVEsRUFBRSxDQUFDLE9BQUQsRUFBVSxRQUFWLEVBQW9CLFFBQXBCO0FBRmMsQ0FBekI7QUFLQUMsUUFBUSxDQUFDLHNCQUFELEVBQXlCLE1BQU07QUFDdEMsT0FBSyxJQUFJQyxJQUFULElBQWlCUCxLQUFqQixFQUF3QjtBQUN2QixRQUFJQSxLQUFLLENBQUNRLGNBQU4sQ0FBcUJELElBQXJCLENBQUosRUFBZ0M7QUFDL0JFLE1BQUFBLEVBQUUsQ0FBQywrQkFBRCxFQUFrQyxNQUFNO0FBQ3pDLGNBQU1DLFNBQVMsR0FBR1IsSUFBSSxHQUFHLEdBQVAsR0FBYUssSUFBL0I7QUFDQUksUUFBQUEsTUFBTSxDQUFDWCxLQUFLLENBQUNPLElBQUQsQ0FBTixDQUFOLENBQW9CSyxJQUFwQixDQUF5QkYsU0FBekI7QUFDQSxPQUhDLENBQUY7QUFJQTtBQUNEO0FBQ0QsQ0FUTyxDQUFSO0FBV0FKLFFBQVEsQ0FBQyw4QkFBRCxFQUFpQyxNQUFNO0FBQzlDRyxFQUFBQSxFQUFFLENBQUMsMkJBQUQsRUFBOEIsTUFBTTtBQUNyQztBQUNBRSxJQUFBQSxNQUFNLENBQ0xaLGNBQWMsQ0FBQyxFQUFELEVBQUtFLE9BQU8sQ0FBQ1ksYUFBUixDQUFzQjtBQUFDQyxNQUFBQSxJQUFJLEVBQUU7QUFBUCxLQUF0QixDQUFMLENBRFQsQ0FBTixDQUVFQyxPQUZGLENBRVUsQ0FBQztBQUFDRCxNQUFBQSxJQUFJLEVBQUU7QUFBUCxLQUFELENBRlY7QUFHQSxHQUxDLENBQUY7QUFNQUwsRUFBQUEsRUFBRSxDQUFDLHFDQUFELEVBQXdDLE1BQU07QUFDL0MsVUFBTU8sV0FBVyxHQUFHO0FBQ25CQyxNQUFBQSxJQUFJLEVBQUVyQixLQUFLLENBQUNJLEtBQUssQ0FBQ2tCLFlBQVAsQ0FEUTtBQUVuQkMsTUFBQUEsT0FBTyxFQUFFO0FBRlUsS0FBcEI7QUFJQVIsSUFBQUEsTUFBTSxDQUNMWixjQUFjLENBQUM7QUFBQ3FCLE1BQUFBLFlBQVksRUFBRTtBQUFmLEtBQUQsRUFBaUNKLFdBQWpDLENBRFQsQ0FBTixDQUVFRCxPQUZGLENBRVU7QUFBQ0ssTUFBQUEsWUFBWSxFQUFFO0FBQWYsS0FGVjtBQUdBLEdBUkMsQ0FBRjtBQVNBLENBaEJPLENBQVI7QUFrQkFkLFFBQVEsQ0FBQyw2QkFBRCxFQUFnQyxNQUFNO0FBQzdDRyxFQUFBQSxFQUFFLENBQUMsbURBQUQsRUFBc0QsTUFBTTtBQUM3RCxRQUFJWSxnQkFBZ0IsR0FBRyxFQUFDLEdBQUdsQjtBQUFKLEtBQXZCO0FBQ0FrQixJQUFBQSxnQkFBZ0IsQ0FBQ25CLElBQUQsQ0FBaEIsR0FBeUI7QUFBQ29CLE1BQUFBLE9BQU8sRUFBRSxJQUFWO0FBQWdCQyxNQUFBQSxZQUFZLEVBQUU7QUFBOUIsS0FBekI7QUFDQVosSUFBQUEsTUFBTSxDQUFDZCxTQUFTLENBQUN5QixPQUFWLENBQWtCRCxnQkFBbEIsQ0FBRCxDQUFOLENBQTRDTixPQUE1QyxDQUFvRCxJQUFwRDtBQUNBLEdBSkMsQ0FBRjtBQUtBTixFQUFBQSxFQUFFLENBQUMsOERBQUQsRUFBaUUsTUFBTTtBQUN4RSxRQUFJZSxnQkFBZ0IsR0FBRyxFQUFDLEdBQUdyQjtBQUFKLEtBQXZCO0FBQ0FxQixJQUFBQSxnQkFBZ0IsQ0FBQyxnQkFBRCxDQUFoQixHQUFxQztBQUFDQyxNQUFBQSxPQUFPLEVBQUU7QUFBVixLQUFyQztBQUNBZCxJQUFBQSxNQUFNLENBQUNkLFNBQVMsQ0FBQzZCLFdBQVYsQ0FBc0JGLGdCQUF0QixDQUFELENBQU4sQ0FBZ0RULE9BQWhELENBQXdEO0FBQ3ZEVSxNQUFBQSxPQUFPLEVBQUU7QUFEOEMsS0FBeEQ7QUFHQSxHQU5DLENBQUY7QUFPQWhCLEVBQUFBLEVBQUUsQ0FBQyx3REFBRCxFQUEyRCxNQUFNO0FBQ2xFRSxJQUFBQSxNQUFNLENBQUNkLFNBQVMsQ0FBQ3lCLE9BQVYsQ0FBa0JuQixnQkFBbEIsQ0FBRCxDQUFOLENBQTRDWSxPQUE1QyxDQUFvRCxLQUFwRDtBQUNBLEdBRkMsQ0FBRjtBQUdBTixFQUFBQSxFQUFFLENBQUMsZ0VBQUQsRUFBbUUsTUFBTTtBQUMxRUUsSUFBQUEsTUFBTSxDQUFDZCxTQUFTLENBQUM2QixXQUFWLENBQXNCdkIsZ0JBQXRCLENBQUQsQ0FBTixDQUFnRFksT0FBaEQsQ0FBd0QsRUFBeEQ7QUFDQSxHQUZDLENBQUY7QUFHQSxDQW5CTyxDQUFSIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtlcnJvcn0gZnJvbSAncmVkdXgtc2FnYS1yZXF1ZXN0cyc7XHJcbmltcG9ydCB7c2VsZWN0b3JzfSBmcm9tICcuLi93ZWF0aGVyLWR1Y2snO1xyXG5pbXBvcnQge1xyXG5cdGRlZmF1bHQgYXMgd2VhdGhlclJlZHVjZXIsXHJcblx0dHlwZXMsXHJcblx0YWN0aW9ucyxcclxuXHRuYW1lXHJcbn0gZnJvbSAnLi4vd2VhdGhlci1zZXJ2aWNlJztcclxuXHJcbmNvbnN0IGluaXRpYWxNb2NrU3RhdGUgPSB7XHJcblx0bW9ja1RpdGxlOiAnbW9ja1RpdGxlJyxcclxuXHRtb2NrRGF0YTogWydwYXB1bCcsICdiYW5hbmEnLCAnbWluaW9uJ11cclxufTtcclxuXHJcbmRlc2NyaWJlKCdUZXN0IHdlYXRoZXIgc2VydmljZScsICgpID0+IHtcclxuXHRmb3IgKHZhciBwcm9wIGluIHR5cGVzKSB7XHJcblx0XHRpZiAodHlwZXMuaGFzT3duUHJvcGVydHkocHJvcCkpIHtcclxuXHRcdFx0aXQoJ3R5cGUgZm9ybWF0IHNob3VsZCBiZSBjb3JyZWN0JywgKCkgPT4ge1xyXG5cdFx0XHRcdGNvbnN0IHR5cGVWYWx1ZSA9IG5hbWUgKyAnLycgKyBwcm9wO1xyXG5cdFx0XHRcdGV4cGVjdCh0eXBlc1twcm9wXSkudG9CZSh0eXBlVmFsdWUpO1xyXG5cdFx0XHR9KTtcclxuXHRcdH1cclxuXHR9XHJcbn0pO1xyXG5cclxuZGVzY3JpYmUoJ1Rlc3Qgd2VhdGhlciBzZXJ2aWNlIHJlZHVjZXInLCAoKSA9PiB7XHJcblx0aXQoJ3Nob3VsZCBoYW5kbGUgTE9BRF9XRUFURVInLCAoKSA9PiB7XHJcblx0XHQvLyBpdCdzIGVtcHR5IG9uIHB1cnBvc2UgYmVjYXVzZSBpdCdzIGp1c3Qgc3RhcnRpbmcgdG8gZmV0Y2ggcG9zdHNcclxuXHRcdGV4cGVjdChcclxuXHRcdFx0d2VhdGhlclJlZHVjZXIoW10sIGFjdGlvbnMud2VhdGhlckxvYWRlZCh7dGVzdDogJ3Rlc3QnfSkpXHJcblx0XHQpLnRvRXF1YWwoW3t0ZXN0OiAndGVzdCd9XSk7XHJcblx0fSk7XHJcblx0aXQoJ3Nob3VsZCByZXR1cm4gZW1wdHlTdGF0ZSB3aGVuIGVycm9yJywgKCkgPT4ge1xyXG5cdFx0Y29uc3QgZXJyb3JBY3Rpb24gPSB7XHJcblx0XHRcdHR5cGU6IGVycm9yKHR5cGVzLkxPQURfV0VBVEhFUiksXHJcblx0XHRcdHBheWxvYWQ6IFwiaWYgeW91IHNlZSBpdCByZWR1Y2VyIGRvZXNuJ3Qgd29ya3NcIlxyXG5cdFx0fTtcclxuXHRcdGV4cGVjdChcclxuXHRcdFx0d2VhdGhlclJlZHVjZXIoe2luaXRpYWxTdGF0ZTogJ2luaXRpYWxTdGF0ZSd9LCBlcnJvckFjdGlvbilcclxuXHRcdCkudG9FcXVhbCh7aW5pdGlhbFN0YXRlOiAnaW5pdGlhbFN0YXRlJ30pO1xyXG5cdH0pO1xyXG59KTtcclxuXHJcbmRlc2NyaWJlKCdUZXN0IHdlYXRoZXIgZHVjayBzZWxlY3RvcnMnLCAoKSA9PiB7XHJcblx0aXQoJ2xvYWRpbmcgc2hvdWxkIHNlbGVjdCBMb2FkaW5nIGlmIHByZXNlbnQgaW4gc3RhdGUnLCAoKSA9PiB7XHJcblx0XHRsZXQgc3RhdGVXaXRoTG9hZGluZyA9IHsuLi5pbml0aWFsTW9ja1N0YXRlfTtcclxuXHRcdHN0YXRlV2l0aExvYWRpbmdbbmFtZV0gPSB7bG9hZGluZzogdHJ1ZSwgb3RoZXJDYXB0aW9uOiAnb3RoZXJDYXB0aW9uJ307XHJcblx0XHRleHBlY3Qoc2VsZWN0b3JzLmxvYWRpbmcoc3RhdGVXaXRoTG9hZGluZykpLnRvRXF1YWwodHJ1ZSk7XHJcblx0fSk7XHJcblx0aXQoJ3dlYXRoZXJEYXRhIHNob3VsZCBzZWxlY3Qgd2VhdGhlclJlZHVjZXIgaWYgcHJlc2VudCBpbiBzdGF0ZScsICgpID0+IHtcclxuXHRcdGxldCBzdGF0ZVdpdGhXZWF0aGVyID0gey4uLmluaXRpYWxNb2NrU3RhdGV9O1xyXG5cdFx0c3RhdGVXaXRoV2VhdGhlclsnd2VhdGhlclJlZHVjZXInXSA9IHt3ZWF0aGVyOiAnaXNHb29kJ307XHJcblx0XHRleHBlY3Qoc2VsZWN0b3JzLndlYXRoZXJEYXRhKHN0YXRlV2l0aFdlYXRoZXIpKS50b0VxdWFsKHtcclxuXHRcdFx0d2VhdGhlcjogJ2lzR29vZCdcclxuXHRcdH0pO1xyXG5cdH0pO1xyXG5cdGl0KCdsb2FkaW5nIHNob3VsZCByZXR1cm4gZmFsc2UgaWYgTG9hZGluZyBhYnNlbnQgaW4gc3RhdGUnLCAoKSA9PiB7XHJcblx0XHRleHBlY3Qoc2VsZWN0b3JzLmxvYWRpbmcoaW5pdGlhbE1vY2tTdGF0ZSkpLnRvRXF1YWwoZmFsc2UpO1xyXG5cdH0pO1xyXG5cdGl0KCd3ZWF0aGVyRGF0YSBzaG91bGQgcmV0dXJuIGVtcHR5IG9iamVjdCBpZiBkYXRhIGFic2VudCBpbiBzdGF0ZScsICgpID0+IHtcclxuXHRcdGV4cGVjdChzZWxlY3RvcnMud2VhdGhlckRhdGEoaW5pdGlhbE1vY2tTdGF0ZSkpLnRvRXF1YWwoe30pO1xyXG5cdH0pO1xyXG59KTtcclxuIl19