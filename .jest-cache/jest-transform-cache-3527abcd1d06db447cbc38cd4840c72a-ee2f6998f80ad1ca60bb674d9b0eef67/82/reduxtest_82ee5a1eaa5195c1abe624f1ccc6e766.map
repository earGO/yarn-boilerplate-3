{"version":3,"sources":["redux.test.js"],"names":["initialMockState","mockTitle","mockData","describe","prop","types","hasOwnProperty","it","typeValue","name","expect","toBe","actions","weatherLoaded","test","toEqual","errorAction","type","LOAD_WEATHER","payload","initialState","stateWithLoading","loading","otherCaption","selectors","stateWithWeather","weather","weatherData"],"mappings":";;AAAA;;AACA;;AACA;;;;;;;;;;AAOA,IAAMA,gBAAgB,GAAG;AACxBC,EAAAA,SAAS,EAAE,WADa;AAExBC,EAAAA,QAAQ,EAAE,CAAC,OAAD,EAAU,QAAV,EAAoB,QAApB;AAFc,CAAzB;AAKAC,QAAQ,CAAC,sBAAD,EAAyB,YAAM;AACtC,OAAK,IAAIC,IAAT,IAAiBC,qBAAjB,EAAwB;AACvB,QAAIA,sBAAMC,cAAN,CAAqBF,IAArB,CAAJ,EAAgC;AAC/BG,MAAAA,EAAE,CAAC,+BAAD,EAAkC,YAAM;AACzC,YAAMC,SAAS,GAAGC,uBAAO,GAAP,GAAaL,IAA/B;AACAM,QAAAA,MAAM,CAACL,sBAAMD,IAAN,CAAD,CAAN,CAAoBO,IAApB,CAAyBH,SAAzB;AACA,OAHC,CAAF;AAIA;AACD;AACD,CATO,CAAR;AAWAL,QAAQ,CAAC,8BAAD,EAAiC,YAAM;AAC9CI,EAAAA,EAAE,CAAC,2BAAD,EAA8B,YAAM;AACrC;AACAG,IAAAA,MAAM,CACL,gCAAe,EAAf,EAAmBE,wBAAQC,aAAR,CAAsB;AAACC,MAAAA,IAAI,EAAE;AAAP,KAAtB,CAAnB,CADK,CAAN,CAEEC,OAFF,CAEU,CAAC;AAACD,MAAAA,IAAI,EAAE;AAAP,KAAD,CAFV;AAGA,GALC,CAAF;AAMAP,EAAAA,EAAE,CAAC,qCAAD,EAAwC,YAAM;AAC/C,QAAMS,WAAW,GAAG;AACnBC,MAAAA,IAAI,EAAE,8BAAMZ,sBAAMa,YAAZ,CADa;AAEnBC,MAAAA,OAAO,EAAE;AAFU,KAApB;AAIAT,IAAAA,MAAM,CACL,gCAAe;AAACU,MAAAA,YAAY,EAAE;AAAf,KAAf,EAA+CJ,WAA/C,CADK,CAAN,CAEED,OAFF,CAEU;AAACK,MAAAA,YAAY,EAAE;AAAf,KAFV;AAGA,GARC,CAAF;AASA,CAhBO,CAAR;AAkBAjB,QAAQ,CAAC,6BAAD,EAAgC,YAAM;AAC7CI,EAAAA,EAAE,CAAC,mDAAD,EAAsD,YAAM;AAC7D,QAAIc,gBAAgB,qBAAOrB,gBAAP,CAApB;;AACAqB,IAAAA,gBAAgB,CAACZ,oBAAD,CAAhB,GAAyB;AAACa,MAAAA,OAAO,EAAE,IAAV;AAAgBC,MAAAA,YAAY,EAAE;AAA9B,KAAzB;AACAb,IAAAA,MAAM,CAACc,uBAAUF,OAAV,CAAkBD,gBAAlB,CAAD,CAAN,CAA4CN,OAA5C,CAAoD,IAApD;AACA,GAJC,CAAF;AAKAR,EAAAA,EAAE,CAAC,8DAAD,EAAiE,YAAM;AACxE,QAAIkB,gBAAgB,qBAAOzB,gBAAP,CAApB;;AACAyB,IAAAA,gBAAgB,CAAC,gBAAD,CAAhB,GAAqC;AAACC,MAAAA,OAAO,EAAE;AAAV,KAArC;AACAhB,IAAAA,MAAM,CAACc,uBAAUG,WAAV,CAAsBF,gBAAtB,CAAD,CAAN,CAAgDV,OAAhD,CAAwD;AACvDW,MAAAA,OAAO,EAAE;AAD8C,KAAxD;AAGA,GANC,CAAF;AAOAnB,EAAAA,EAAE,CAAC,wDAAD,EAA2D,YAAM;AAClEG,IAAAA,MAAM,CAACc,uBAAUF,OAAV,CAAkBtB,gBAAlB,CAAD,CAAN,CAA4Ce,OAA5C,CAAoD,KAApD;AACA,GAFC,CAAF;AAGAR,EAAAA,EAAE,CAAC,gEAAD,EAAmE,YAAM;AAC1EG,IAAAA,MAAM,CAACc,uBAAUG,WAAV,CAAsB3B,gBAAtB,CAAD,CAAN,CAAgDe,OAAhD,CAAwD,EAAxD;AACA,GAFC,CAAF;AAGA,CAnBO,CAAR","sourcesContent":["import {error} from 'redux-saga-requests';\r\nimport {selectors} from '../weather-duck';\r\nimport {\r\n\tdefault as weatherReducer,\r\n\ttypes,\r\n\tactions,\r\n\tname\r\n} from '../weather-service';\r\n\r\nconst initialMockState = {\r\n\tmockTitle: 'mockTitle',\r\n\tmockData: ['papul', 'banana', 'minion']\r\n};\r\n\r\ndescribe('Test weather service', () => {\r\n\tfor (var prop in types) {\r\n\t\tif (types.hasOwnProperty(prop)) {\r\n\t\t\tit('type format should be correct', () => {\r\n\t\t\t\tconst typeValue = name + '/' + prop;\r\n\t\t\t\texpect(types[prop]).toBe(typeValue);\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n});\r\n\r\ndescribe('Test weather service reducer', () => {\r\n\tit('should handle LOAD_WEATER', () => {\r\n\t\t// it's empty on purpose because it's just starting to fetch posts\r\n\t\texpect(\r\n\t\t\tweatherReducer([], actions.weatherLoaded({test: 'test'}))\r\n\t\t).toEqual([{test: 'test'}]);\r\n\t});\r\n\tit('should return emptyState when error', () => {\r\n\t\tconst errorAction = {\r\n\t\t\ttype: error(types.LOAD_WEATHER),\r\n\t\t\tpayload: \"if you see it reducer doesn't works\"\r\n\t\t};\r\n\t\texpect(\r\n\t\t\tweatherReducer({initialState: 'initialState'}, errorAction)\r\n\t\t).toEqual({initialState: 'initialState'});\r\n\t});\r\n});\r\n\r\ndescribe('Test weather duck selectors', () => {\r\n\tit('loading should select Loading if present in state', () => {\r\n\t\tlet stateWithLoading = {...initialMockState};\r\n\t\tstateWithLoading[name] = {loading: true, otherCaption: 'otherCaption'};\r\n\t\texpect(selectors.loading(stateWithLoading)).toEqual(true);\r\n\t});\r\n\tit('weatherData should select weatherReducer if present in state', () => {\r\n\t\tlet stateWithWeather = {...initialMockState};\r\n\t\tstateWithWeather['weatherReducer'] = {weather: 'isGood'};\r\n\t\texpect(selectors.weatherData(stateWithWeather)).toEqual({\r\n\t\t\tweather: 'isGood'\r\n\t\t});\r\n\t});\r\n\tit('loading should return false if Loading absent in state', () => {\r\n\t\texpect(selectors.loading(initialMockState)).toEqual(false);\r\n\t});\r\n\tit('weatherData should return empty object if data absent in state', () => {\r\n\t\texpect(selectors.weatherData(initialMockState)).toEqual({});\r\n\t});\r\n});\r\n"]}