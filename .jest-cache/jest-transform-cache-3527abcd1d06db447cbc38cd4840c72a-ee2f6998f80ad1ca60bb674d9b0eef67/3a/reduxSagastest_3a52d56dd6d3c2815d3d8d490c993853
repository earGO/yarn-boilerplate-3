54b18d952e43a8c49adda765ecf3e8d3
"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _reduxSagaRequests = require("redux-saga-requests");

var _reduxThunk = _interopRequireDefault(require("redux-thunk"));

var _selectors = require("../module/selectors");

var moduleActions = _interopRequireWildcard(require("../module/actions"));

var _fetchMock = _interopRequireDefault(require("fetch-mock"));

var _import = require("../../../import");

var _reduxMockStore = _interopRequireDefault(require("redux-mock-store"));

var projectCardReducer = _import.projectCardService.projectCardReducer,
    name = _import.projectCardService.name,
    types = _import.projectCardService.types,
    actions = _import.projectCardService.actions,
    api = _import.projectCardService.api,
    endpoints = _import.projectCardService.endpoints;
var initialMockState = {
  mockTitle: 'mockTitle',
  mockData: ['papul', 'banana', 'minion']
};
var middlewares = [_reduxThunk["default"]];
var mockStore = (0, _reduxMockStore["default"])(middlewares);
var store = mockStore({
  project: []
});
describe('Test projectCard service', function () {
  for (var prop in types) {
    if (types.hasOwnProperty(prop)) {
      it('type format should be correct', function () {
        var typeValue = name + '/' + prop;
        expect(types[prop]).toBe(typeValue);
      });
    }
  }
});
describe('Test projectCard service reducer', function () {
  it('should handle LOAD_PROJECT', function () {
    var successAction = {
      type: (0, _reduxSagaRequests.success)(types.LOAD_PROJECT),
      payload: {
        data: {
          test: 'test'
        }
      }
    };
    expect(projectCardReducer({}, successAction)).toEqual({
      project: {
        test: 'test'
      }
    });
  });
  it('should return emptyState when error', function () {
    var errorAction = {
      type: (0, _reduxSagaRequests.error)(types.LOAD_PROJECT),
      payload: "if you see it reducer doesn't works"
    };
    expect(projectCardReducer({
      initialState: 'initialState'
    }, errorAction)).toEqual({
      initialState: 'initialState'
    });
  });
});
describe('Test projectCard service actions', function () {
  beforeEach(function () {
    // Runs before each test in the suite
    store.clearActions();
  });
  afterEach(function () {
    _fetchMock["default"].restore();
  });
  test('Dispatches the correct action and payload', function () {
    var expectedActions = [{
      payload: {
        request: {
          url: 'http://localhost:3000/project/'
        }
      },
      type: 'project-card/LOAD_TABS_SUCCESS'
    }];
    store.dispatch(actions.loadProject());
    expect(store.getActions()).toEqual(expectedActions);
  });
  test('creates project-card/LOAD_PROJECT_SUCCESS when fetching data has been done', function () {
    var endpoint = api + endpoints.project;

    _fetchMock["default"].getOnce(endpoint, {
      payload: {
        request: {
          url: 'http://localhost:3000/project/'
        }
      },
      headers: {
        'content-type': 'application/json'
      }
    });

    var expectedActions = [{
      type: types.LOAD_PROJECT
    }, {
      type: (0, _reduxSagaRequests.success)(types.LOAD_TABS),
      body: {
        project: {
          someprojectId: 'theId'
        }
      }
    }];
    store.dispatch(actions.loadProject());
    expect(store.getActions()).toEqual(expectedActions);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,