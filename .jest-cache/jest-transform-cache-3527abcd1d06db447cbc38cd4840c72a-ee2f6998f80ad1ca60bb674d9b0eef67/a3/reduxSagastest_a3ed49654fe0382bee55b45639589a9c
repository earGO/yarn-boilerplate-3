9de4aab6a1c5af755bcfb5618794028d
"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _reduxSagaRequests = require("redux-saga-requests");

var _reduxThunk = _interopRequireDefault(require("redux-thunk"));

var _selectors = require("../module/selectors");

var moduleActions = _interopRequireWildcard(require("../module/actions"));

var _fetchMock = _interopRequireDefault(require("fetch-mock"));

var _import = require("../../../import");

var _reduxMockStore = _interopRequireDefault(require("redux-mock-store"));

var projectCardReducer = _import.projectCardService.projectCardReducer,
    name = _import.projectCardService.name,
    types = _import.projectCardService.types,
    actions = _import.projectCardService.actions,
    api = _import.projectCardService.api,
    endpoints = _import.projectCardService.endpoints;
var initialMockState = {
  mockTitle: 'mockTitle',
  mockData: ['papul', 'banana', 'minion']
};
var middlewares = [_reduxThunk["default"]];
var mockStore = (0, _reduxMockStore["default"])(middlewares);
var store = mockStore({
  project: []
});
describe('Test projectCard service', function () {
  for (var prop in types) {
    if (types.hasOwnProperty(prop)) {
      it('type format should be correct', function () {
        var typeValue = name + '/' + prop;
        expect(types[prop]).toBe(typeValue);
      });
    }
  }
});
describe('Test projectCard service reducer', function () {
  it('should handle LOAD_PROJECT', function () {
    var successAction = {
      type: (0, _reduxSagaRequests.success)(types.LOAD_PROJECT),
      payload: {
        data: {
          test: 'test'
        }
      }
    };
    expect(projectCardReducer({}, successAction)).toEqual({
      project: {
        test: 'test'
      }
    });
  });
  it('should return emptyState when error', function () {
    var errorAction = {
      type: (0, _reduxSagaRequests.error)(types.LOAD_PROJECT),
      payload: "if you see it reducer doesn't works"
    };
    expect(projectCardReducer({
      initialState: 'initialState'
    }, errorAction)).toEqual({
      initialState: 'initialState'
    });
  });
});
describe('Test projectCard service actions', function () {
  beforeEach(function () {
    // Runs before each test in the suite
    store.clearActions();
  });
  afterEach(function () {
    _fetchMock["default"].restore();
  });
  test('Dispatches the correct action and payload', function () {
    var expectedActions = [{
      payload: {
        request: {
          url: 'http://localhost:3000/project/'
        }
      },
      type: 'project-card/LOAD_PROJECT'
    }];
    store.dispatch(actions.loadProject());
    expect(store.getActions()).toEqual(expectedActions);
  });
  test('creates project-card/LOAD_PROJECT_SUCCESS when fetching data has been done', function () {
    var endpoint = api + endpoints.project;

    _fetchMock["default"].getOnce(endpoint, {
      body: {
        project: {
          someprojectId: 'theId'
        }
      },
      headers: {
        'content-type': 'application/json'
      }
    });

    var expectedActions = [{
      type: types.LOAD_PROJECT
    }, {
      type: (0, _reduxSagaRequests.success)(types.LOAD_TABS),
      body: {
        project: {
          someprojectId: 'theId'
        }
      }
    }];
    store.dispatch(actions.loadProject());
    expect(store.getActions()).toEqual(expectedActions);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInJlZHV4U2FnYXMudGVzdC5qcyJdLCJuYW1lcyI6WyJwcm9qZWN0Q2FyZFJlZHVjZXIiLCJwcm9qZWN0Q2FyZFNlcnZpY2UiLCJuYW1lIiwidHlwZXMiLCJhY3Rpb25zIiwiYXBpIiwiZW5kcG9pbnRzIiwiaW5pdGlhbE1vY2tTdGF0ZSIsIm1vY2tUaXRsZSIsIm1vY2tEYXRhIiwibWlkZGxld2FyZXMiLCJ0aHVuayIsIm1vY2tTdG9yZSIsInN0b3JlIiwicHJvamVjdCIsImRlc2NyaWJlIiwicHJvcCIsImhhc093blByb3BlcnR5IiwiaXQiLCJ0eXBlVmFsdWUiLCJleHBlY3QiLCJ0b0JlIiwic3VjY2Vzc0FjdGlvbiIsInR5cGUiLCJMT0FEX1BST0pFQ1QiLCJwYXlsb2FkIiwiZGF0YSIsInRlc3QiLCJ0b0VxdWFsIiwiZXJyb3JBY3Rpb24iLCJpbml0aWFsU3RhdGUiLCJiZWZvcmVFYWNoIiwiY2xlYXJBY3Rpb25zIiwiYWZ0ZXJFYWNoIiwiZmV0Y2hNb2NrIiwicmVzdG9yZSIsImV4cGVjdGVkQWN0aW9ucyIsInJlcXVlc3QiLCJ1cmwiLCJkaXNwYXRjaCIsImxvYWRQcm9qZWN0IiwiZ2V0QWN0aW9ucyIsImVuZHBvaW50IiwiZ2V0T25jZSIsImJvZHkiLCJzb21lcHJvamVjdElkIiwiaGVhZGVycyIsIkxPQURfVEFCUyJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0lBR0NBLGtCLEdBTUdDLDBCLENBTkhELGtCO0lBQ0FFLEksR0FLR0QsMEIsQ0FMSEMsSTtJQUNBQyxLLEdBSUdGLDBCLENBSkhFLEs7SUFDQUMsTyxHQUdHSCwwQixDQUhIRyxPO0lBQ0FDLEcsR0FFR0osMEIsQ0FGSEksRztJQUNBQyxTLEdBQ0dMLDBCLENBREhLLFM7QUFHRCxJQUFNQyxnQkFBZ0IsR0FBRztBQUN4QkMsRUFBQUEsU0FBUyxFQUFFLFdBRGE7QUFFeEJDLEVBQUFBLFFBQVEsRUFBRSxDQUFDLE9BQUQs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ckMsR0FBRyxHQUFHQyxTQUFTLENBQUNRLE9BQWpDOztBQUNBb0IsMEJBQVVTLE9BQVYsQ0FBa0JELFFBQWxCLEVBQTRCO0FBQzNCRSxNQUFBQSxJQUFJLEVBQUU7QUFBQzlCLFFBQUFBLE9BQU8sRUFBRTtBQUFDK0IsVUFBQUEsYUFBYSxFQUFFO0FBQWhCO0FBQVYsT0FEcUI7QUFFM0JDLE1BQUFBLE9BQU8sRUFBRTtBQUFDLHdCQUFnQjtBQUFqQjtBQUZrQixLQUE1Qjs7QUFLQSxRQUFNVixlQUFlLEdBQUcsQ0FDdkI7QUFBQ2IsTUFBQUEsSUFBSSxFQUFFcEIsS0FBSyxDQUFDcUI7QUFBYixLQUR1QixFQUV2QjtBQUNDRCxNQUFBQSxJQUFJLEVBQUUsZ0NBQVFwQixLQUFLLENBQUM0QyxTQUFkLENBRFA7QUFFQ0gsTUFBQUEsSUFBSSxFQUFFO0FBQUM5QixRQUFBQSxPQUFPLEVBQUU7QUFBQytCLFVBQUFBLGFBQWEsRUFBRTtBQUFoQjtBQUFWO0FBRlAsS0FGdUIsQ0FBeEI7QUFPQWhDLElBQUFBLEtBQUssQ0FBQzBCLFFBQU4sQ0FBZW5DLE9BQU8sQ0FBQ29DLFdBQVIsRUFBZjtBQUNBcEIsSUFBQUEsTUFBTSxDQUFDUCxLQUFLLENBQUM0QixVQUFOLEVBQUQsQ0FBTixDQUEyQmIsT0FBM0IsQ0FBbUNRLGVBQW5DO0FBQ0EsR0FoQkcsQ0FBSjtBQWlCQSxDQW5DTyxDQUFSIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtlcnJvciwgc3VjY2Vzc30gZnJvbSAncmVkdXgtc2FnYS1yZXF1ZXN0cyc7XG5pbXBvcnQgdGh1bmsgZnJvbSAncmVkdXgtdGh1bmsnO1xuaW1wb3J0IHtzZWxlY3RvcnN9IGZyb20gJy4uL21vZHVsZS9zZWxlY3RvcnMnO1xuaW1wb3J0ICogYXMgbW9kdWxlQWN0aW9ucyBmcm9tICcuLi9tb2R1bGUvYWN0aW9ucyc7XG5pbXBvcnQgZmV0Y2hNb2NrIGZyb20gJ2ZldGNoLW1vY2snO1xuaW1wb3J0IHtwcm9qZWN0Q2FyZFNlcnZpY2V9IGZyb20gJy4uLy4uLy4uL2ltcG9ydCc7XG5pbXBvcnQgY29uZmlndXJlU3RvcmUgZnJvbSAncmVkdXgtbW9jay1zdG9yZSc7XG5cbmNvbnN0IHtcblx0cHJvamVjdENhcmRSZWR1Y2VyLFxuXHRuYW1lLFxuXHR0eXBlcyxcblx0YWN0aW9ucyxcblx0YXBpLFxuXHRlbmRwb2ludHNcbn0gPSBwcm9qZWN0Q2FyZFNlcnZpY2U7XG5cbmNvbnN0IGluaXRpYWxNb2NrU3RhdGUgPSB7XG5cdG1vY2tUaXRsZTogJ21vY2tUaXRsZScsXG5cdG1vY2tEYXRhOiBbJ3BhcHVsJywgJ2JhbmFuYScsICdtaW5pb24nXVxufTtcblxuY29uc3QgbWlkZGxld2FyZXMgPSBbdGh1bmtdO1xuY29uc3QgbW9ja1N0b3JlID0gY29uZmlndXJlU3RvcmUobWlkZGxld2FyZXMpO1xuY29uc3Qgc3RvcmUgPSBtb2NrU3RvcmUoe3Byb2plY3Q6IFtdfSk7XG5cbmRlc2NyaWJlKCdUZXN0IHByb2plY3RDYXJkIHNlcnZpY2UnLCAoKSA9PiB7XG5cdGZvciAodmFyIHByb3AgaW4gdHlwZXMpIHtcblx0XHRpZiAodHlwZXMuaGFzT3duUHJvcGVydHkocHJvcCkpIHtcblx0XHRcdGl0KCd0eXBlIGZvcm1hdCBzaG91bGQgYmUgY29ycmVjdCcsICgpID0+IHtcblx0XHRcdFx0Y29uc3QgdHlwZVZhbHVlID0gbmFtZSArICcvJyArIHByb3A7XG5cdFx0XHRcdGV4cGVjdCh0eXBlc1twcm9wXSkudG9CZSh0eXBlVmFsdWUpO1xuXHRcdFx0fSk7XG5cdFx0fVxuXHR9XG59KTtcblxuZGVzY3JpYmUoJ1Rlc3QgcHJvamVjdENhcmQgc2VydmljZSByZWR1Y2VyJywgKCkgPT4ge1xuXHRpdCgnc2hvdWxkIGhhbmRsZSBMT0FEX1BST0pFQ1QnLCAoKSA9PiB7XG5cdFx0Y29uc3Qgc3VjY2Vzc0FjdGlvbiA9IHtcblx0XHRcdHR5cGU6IHN1Y2Nlc3ModHlwZXMuTE9BRF9QUk9KRUNUKSxcblx0XHRcdHBheWxvYWQ6IHtkYXRhOiB7dGVzdDogJ3Rlc3QnfX1cblx0XHR9O1xuXHRcdGV4cGVjdChwcm9qZWN0Q2FyZFJlZHVjZXIoe30sIHN1Y2Nlc3NBY3Rpb24pKS50b0VxdWFsKHtcblx0XHRcdHByb2plY3Q6IHt0ZXN0OiAndGVzdCd9XG5cdFx0fSk7XG5cdH0pO1xuXHRpdCgnc2hvdWxkIHJldHVybiBlbXB0eVN0YXRlIHdoZW4gZXJyb3InLCAoKSA9PiB7XG5cdFx0Y29uc3QgZXJyb3JBY3Rpb24gPSB7XG5cdFx0XHR0eXBlOiBlcnJvcih0eXBlcy5MT0FEX1BST0pFQ1QpLFxuXHRcdFx0cGF5bG9hZDogXCJpZiB5b3Ugc2VlIGl0IHJlZHVjZXIgZG9lc24ndCB3b3Jrc1wiXG5cdFx0fTtcblx0XHRleHBlY3QoXG5cdFx0XHRwcm9qZWN0Q2FyZFJlZHVjZXIoe2luaXRpYWxTdGF0ZTogJ2luaXRpYWxTdGF0ZSd9LCBlcnJvckFjdGlvbilcblx0XHQpLnRvRXF1YWwoe2luaXRpYWxTdGF0ZTogJ2luaXRpYWxTdGF0ZSd9KTtcblx0fSk7XG59KTtcblxuZGVzY3JpYmUoJ1Rlc3QgcHJvamVjdENhcmQgc2VydmljZSBhY3Rpb25zJywgKCkgPT4ge1xuXHRiZWZvcmVFYWNoKCgpID0+IHtcblx0XHQvLyBSdW5zIGJlZm9yZSBlYWNoIHRlc3QgaW4gdGhlIHN1aXRlXG5cdFx0c3RvcmUuY2xlYXJBY3Rpb25zKCk7XG5cdH0pO1xuXHRhZnRlckVhY2goKCkgPT4ge1xuXHRcdGZldGNoTW9jay5yZXN0b3JlKCk7XG5cdH0pO1xuXHR0ZXN0KCdEaXNwYXRjaGVzIHRoZSBjb3JyZWN0IGFjdGlvbiBhbmQgcGF5bG9hZCcsICgpID0+IHtcblx0XHRjb25zdCBleHBlY3RlZEFjdGlvbnMgPSBbXG5cdFx0XHR7XG5cdFx0XHRcdHBheWxvYWQ6IHtyZXF1ZXN0OiB7dXJsOiAnaHR0cDovL2xvY2FsaG9zdDozMDAwL3Byb2plY3QvJ319LFxuXHRcdFx0XHR0eXBlOiAncHJvamVjdC1jYXJkL0xPQURfUFJPSkVDVCdcblx0XHRcdH1cblx0XHRdO1xuXHRcdHN0b3JlLmRpc3BhdGNoKGFjdGlvbnMubG9hZFByb2plY3QoKSk7XG5cdFx0ZXhwZWN0KHN0b3JlLmdldEFjdGlvbnMoKSkudG9FcXVhbChleHBlY3RlZEFjdGlvbnMpO1xuXHR9KTtcblx0dGVzdCgnY3JlYXRlcyBwcm9qZWN0LWNhcmQvTE9BRF9QUk9KRUNUX1NVQ0NFU1Mgd2hlbiBmZXRjaGluZyBkYXRhIGhhcyBiZWVuIGRvbmUnLCAoKSA9PiB7XG5cdFx0Y29uc3QgZW5kcG9pbnQgPSBhcGkgKyBlbmRwb2ludHMucHJvamVjdDtcblx0XHRmZXRjaE1vY2suZ2V0T25jZShlbmRwb2ludCwge1xuXHRcdFx0Ym9keToge3Byb2plY3Q6IHtzb21lcHJvamVjdElkOiAndGhlSWQnfX0sXG5cdFx0XHRoZWFkZXJzOiB7J2NvbnRlbnQtdHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJ31cblx0XHR9KTtcblxuXHRcdGNvbnN0IGV4cGVjdGVkQWN0aW9ucyA9IFtcblx0XHRcdHt0eXBlOiB0eXBlcy5MT0FEX1BST0pFQ1R9LFxuXHRcdFx0e1xuXHRcdFx0XHR0eXBlOiBzdWNjZXNzKHR5cGVzLkxPQURfVEFCUyksXG5cdFx0XHRcdGJvZHk6IHtwcm9qZWN0OiB7c29tZXByb2plY3RJZDogJ3RoZUlkJ319XG5cdFx0XHR9XG5cdFx0XTtcblx0XHRzdG9yZS5kaXNwYXRjaChhY3Rpb25zLmxvYWRQcm9qZWN0KCkpO1xuXHRcdGV4cGVjdChzdG9yZS5nZXRBY3Rpb25zKCkpLnRvRXF1YWwoZXhwZWN0ZWRBY3Rpb25zKTtcblx0fSk7XG59KTtcbiJdfQ==