b38056ad34dcac9ba727a00060a409fb
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _getRequests = require("../getRequests");

var _ = _interopRequireDefault(require("../."));

var _fetchMock = _interopRequireDefault(require("fetch-mock"));

/**
 * we gonna test if this util returns expected call from mock api,
 * and if it returns error, when api URL is wrong
 * */
var api = 'http://localhost:3000/user';
var apiWrong = 'http://localhost:3200/wrong';
var correct = {
  id: 'mr2w3s0m3',
  name: 'Barney',
  lastname: 'Stinson'
};
describe('Test simpleGetRequest from server requests in utils', function () {
  test('returns correct value from correct api',
  /*#__PURE__*/
  (0, _asyncToGenerator2["default"])(
  /*#__PURE__*/
  _regenerator["default"].mark(function _callee() {
    var result;
    return _regenerator["default"].wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return (0, _getRequests.simpleGetRequest)(api);

          case 2:
            result = _context.sent;
            expect(result).toStrictEqual(correct);

          case 4:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, this);
  })));
  test('the fetch fails with an error if empty',
  /*#__PURE__*/
  (0, _asyncToGenerator2["default"])(
  /*#__PURE__*/
  _regenerator["default"].mark(function _callee2() {
    var result;
    return _regenerator["default"].wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            _context2.next = 2;
            return (0, _getRequests.simpleGetRequest)(apiWrong);

          case 2:
            result = _context2.sent;
            expect(Object.keys(result)).toStrictEqual(['error', 'body']);

          case 4:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2, this);
  })));
});
describe('Test serverRequests imports and exports serverRequests utils', function () {
  test('imports simpleRequestApi',
  /*#__PURE__*/
  (0, _asyncToGenerator2["default"])(
  /*#__PURE__*/
  _regenerator["default"].mark(function _callee3() {
    var result;
    return _regenerator["default"].wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            _context3.next = 2;
            return _["default"].simpleGetRequest(api);

          case 2:
            result = _context3.sent;
            expect(result).toStrictEqual(correct);

          case 4:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3, this);
  })));
  it('should call the api', function () {
    return _["default"].simpleGetRequest(api, false).then(function () {
      console.log('fetchMock.called():', _fetchMock["default"].called());
      expect(_fetchMock["default"].called()).toBe(true);
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImdldFJlcXVlc3RzLnRlc3QuanMiXSwibmFtZXMiOlsiYXBpIiwiYXBpV3JvbmciLCJjb3JyZWN0IiwiaWQiLCJuYW1lIiwibGFzdG5hbWUiLCJkZXNjcmliZSIsInRlc3QiLCJyZXN1bHQiLCJleHBlY3QiLCJ0b1N0cmljdEVxdWFsIiwiT2JqZWN0Iiwia2V5cyIsInNlcnZlclJlcXVlc3RzIiwic2ltcGxlR2V0UmVxdWVzdCIsIml0IiwidGhlbiIsImNvbnNvbGUiLCJsb2ciLCJmZXRjaE1vY2siLCJjYWxsZWQiLCJ0b0JlIl0sIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBOztBQUNBOztBQUNBOztBQUVBOzs7O0FBS0EsSUFBTUEsR0FBRyxHQUFHLDRCQUFaO0FBQ0EsSUFBTUMsUUFBUSxHQUFHLDZCQUFqQjtBQUNBLElBQU1DLE9BQU8sR0FBRztBQUNmQyxFQUFBQSxFQUFFLEVBQUUsV0FEVztBQUVmQyxFQUFBQSxJQUFJLEVBQUUsUUFGUztBQUdmQyxFQUFBQSxRQUFRLEVBQUU7QUFISyxDQUFoQjtBQU1BQyxRQUFRLENBQUMscURBQUQsRUFBd0QsWUFBTTtBQUNyRUMsRUFBQUEsSUFBSSxDQUFDLHdDQUFEO0FBQUE7QUFBQTtBQUFBO0FBQUEsK0JBQTJDO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsbUJBQ3pCLG1DQUFpQlAsR0FBakIsQ0FEeUI7O0FBQUE7QUFDeENRLFlBQUFBLE1BRHdDO0FBRTlDQyxZQUFBQSxNQUFNLENBQUNELE1BQUQsQ0FBTixDQUFlRSxhQUFmLENBQTZCUixPQUE3Qjs7QUFGOEM7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsR0FBM0MsR0FBSjtBQUlBSyxFQUFBQSxJQUFJLENBQUMsd0NBQUQ7QUFBQTtBQUFBO0FBQUE7QUFBQSwrQkFBMkM7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxtQkFDekIsbUNBQWlCTixRQUFqQixDQUR5Qjs7QUFBQTtBQUN4Q08sWUFBQUEsTUFEd0M7QUFFOUNDLFlBQUFBLE1BQU0sQ0FBQ0UsTUFBTSxDQUFDQyxJQUFQLENBQVlKLE1BQVosQ0FBRCxDQUFOLENBQTRCRSxhQUE1QixDQUEwQyxDQUFDLE9BQUQsRUFBVSxNQUFWLENBQTFDOztBQUY4QztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxHQUEzQyxHQUFKO0FBSUEsQ0FUTyxDQUFSO0FBV0FKLFFBQVEsQ0FBQyw4REFBRCxFQUFpRSxZQUFNO0FBQzlFQyxFQUFBQSxJQUFJLENBQUMsMEJBQUQ7QUFBQTtBQUFBO0FBQUE7QUFBQSwrQkFBNkI7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxtQkFDWE0sYUFBZUMsZ0JBQWYsQ0FBZ0NkLEdBQWhDLENBRFc7O0FBQUE7QUFDMUJRLFlBQUFBLE1BRDBCO0FBRWhDQyxZQUFBQSxNQUFNLENBQUNELE1BQUQsQ0FBTixDQUFlRSxhQUFmLENBQTZCUixPQUE3Qjs7QUFGZ0M7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsR0FBN0IsR0FBSjtBQUlBYSxFQUFBQSxFQUFFLENBQUMscUJBQUQsRUFBd0IsWUFBTTtBQUMvQixXQUFPRixhQUFlQyxnQkFBZixDQUFnQ2QsR0FBaEMsRUFBcUMsS0FBckMsRUFBNENnQixJQUE1QyxDQUFpRCxZQUFNO0FBQzdEQyxNQUFBQSxPQUFPLENBQUNDLEdBQVIsQ0FBWSxxQkFBWixFQUFtQ0Msc0JBQVVDLE1BQVYsRUFBbkM7QUFDQVgsTUFBQUEsTUFBTSxDQUFDVSxzQkFBVUMsTUFBVixFQUFELENBQU4sQ0FBMkJDLElBQTNCLENBQWdDLElBQWhDO0FBQ0EsS0FITSxDQUFQO0FBSUEsR0FMQyxDQUFGO0FBTUEsQ0FYTyxDQUFSIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtzaW1wbGVHZXRSZXF1ZXN0fSBmcm9tICcuLi9nZXRSZXF1ZXN0cyc7XG5pbXBvcnQgc2VydmVyUmVxdWVzdHMgZnJvbSAnLi4vLic7XG5pbXBvcnQgZmV0Y2hNb2NrIGZyb20gJ2ZldGNoLW1vY2snO1xuXG4vKipcbiAqIHdlIGdvbm5hIHRlc3QgaWYgdGhpcyB1dGlsIHJldHVybnMgZXhwZWN0ZWQgY2FsbCBmcm9tIG1vY2sgYXBpLFxuICogYW5kIGlmIGl0IHJldHVybnMgZXJyb3IsIHdoZW4gYXBpIFVSTCBpcyB3cm9uZ1xuICogKi9cblxuY29uc3QgYXBpID0gJ2h0dHA6Ly9sb2NhbGhvc3Q6MzAwMC91c2VyJztcbmNvbnN0IGFwaVdyb25nID0gJ2h0dHA6Ly9sb2NhbGhvc3Q6MzIwMC93cm9uZyc7XG5jb25zdCBjb3JyZWN0ID0ge1xuXHRpZDogJ21yMnczczBtMycsXG5cdG5hbWU6ICdCYXJuZXknLFxuXHRsYXN0bmFtZTogJ1N0aW5zb24nXG59O1xuXG5kZXNjcmliZSgnVGVzdCBzaW1wbGVHZXRSZXF1ZXN0IGZyb20gc2VydmVyIHJlcXVlc3RzIGluIHV0aWxzJywgKCkgPT4ge1xuXHR0ZXN0KCdyZXR1cm5zIGNvcnJlY3QgdmFsdWUgZnJvbSBjb3JyZWN0IGFwaScsIGFzeW5jICgpID0+IHtcblx0XHRjb25zdCByZXN1bHQgPSBhd2FpdCBzaW1wbGVHZXRSZXF1ZXN0KGFwaSk7XG5cdFx0ZXhwZWN0KHJlc3VsdCkudG9TdHJpY3RFcXVhbChjb3JyZWN0KTtcblx0fSk7XG5cdHRlc3QoJ3RoZSBmZXRjaCBmYWlscyB3aXRoIGFuIGVycm9yIGlmIGVtcHR5JywgYXN5bmMgKCkgPT4ge1xuXHRcdGNvbnN0IHJlc3VsdCA9IGF3YWl0IHNpbXBsZUdldFJlcXVlc3QoYXBpV3JvbmcpO1xuXHRcdGV4cGVjdChPYmplY3Qua2V5cyhyZXN1bHQpKS50b1N0cmljdEVxdWFsKFsnZXJyb3InLCAnYm9keSddKTtcblx0fSk7XG59KTtcblxuZGVzY3JpYmUoJ1Rlc3Qgc2VydmVyUmVxdWVzdHMgaW1wb3J0cyBhbmQgZXhwb3J0cyBzZXJ2ZXJSZXF1ZXN0cyB1dGlscycsICgpID0+IHtcblx0dGVzdCgnaW1wb3J0cyBzaW1wbGVSZXF1ZXN0QXBpJywgYXN5bmMgKCkgPT4ge1xuXHRcdGNvbnN0IHJlc3VsdCA9IGF3YWl0IHNlcnZlclJlcXVlc3RzLnNpbXBsZUdldFJlcXVlc3QoYXBpKTtcblx0XHRleHBlY3QocmVzdWx0KS50b1N0cmljdEVxdWFsKGNvcnJlY3QpO1xuXHR9KTtcblx0aXQoJ3Nob3VsZCBjYWxsIHRoZSBhcGknLCAoKSA9PiB7XG5cdFx0cmV0dXJuIHNlcnZlclJlcXVlc3RzLnNpbXBsZUdldFJlcXVlc3QoYXBpLCBmYWxzZSkudGhlbigoKSA9PiB7XG5cdFx0XHRjb25zb2xlLmxvZygnZmV0Y2hNb2NrLmNhbGxlZCgpOicsIGZldGNoTW9jay5jYWxsZWQoKSk7XG5cdFx0XHRleHBlY3QoZmV0Y2hNb2NrLmNhbGxlZCgpKS50b0JlKHRydWUpO1xuXHRcdH0pO1xuXHR9KTtcbn0pO1xuIl19