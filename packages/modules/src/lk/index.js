import React, {useState} from 'react'
import {useSelector, useDispatch} from 'react-redux'
import * as module from './module'
import {Flex, Box, Button, Text, Relative} from '../../import'
import * as selectors from './module/selectors'
import * as actions from './module/actions'
import {DynamicModuleLoader} from 'redux-dynamic-modules'
import {Loading, ContentBox, Icon} from '../../import'
import ProjectsTable from './ProjectsTable'
import SearchAndFilter from './SearchAndFilter'
import styled from 'styled-components'
import Infograph01 from './Infograph01'
import Infograph02 from './Infograph02'
import {projectCardModule} from '../../localIntegration'
import CreateProjectModal from './CreateProjectModal'

const BottomPart = styled(Box)`
	border-width: 1px;
	border-style: solid;
	border-color: ${props => props.theme.colors.semiLightGrey};
	margin: 0 auto;
	width: 1120px;
`

const InfoGraphics = styled(Relative)`
	border-width: 1px;
	border-style: solid;
	border-color: ${props => props.theme.colors.semiLightGrey};
	margin: 32px auto;
	width: 1120px;
	height:256px;!important;
`

const Scaler = styled(Relative)`
	transform: scale(0.8, 0.65);
`

const GraphPosition = styled(Relative)`
	margin: 0 auto;
`

const IconPosition = styled(Flex)`
	position: absolute;
	width: 100%;
	top: 8px;
	right: 6px;
`

function LK({history, ...props}) {
	/* State variables */
	const [openTable, setTableOpen] = useState(false)
	const [filterStartDate, setFilterStartDate] = useState(null)
	const [filterEndDate, setFilterEndDate] = useState(null)
	const [filterCriteria, setFilterCriteria] = useState(null)
	const [projectsSortCriteria, setProjectsSort] = useState('dateChange')

	/* Use selector variables */
	const loading = useSelector(selectors.projectsLoading) // Selector for projects-loading-status
	const data = useSelector(selectors.projectsDataSelector) // Selector for bulk unmodified data
	const localOption = useSelector(selectors.localNavigationStage) // Select chosen project type from local navigation

	/* Action dispatchers */
	const dispatch = useDispatch()
	const projectClick = projectId => dispatch(actions.selectProject(projectId))

	/* Sorted flatten array of projects - since we have default sort value
	 * when page loads - we always will recieve some criteria
	 * for filtering incoming projects */
	const sortedOnCriteria = useSelector(
		selectors.sortedOnCriteria(projectsSortCriteria)
	)

	/* Same array of projects, filtered on dates, selected with datepicker  */
	const filteredOnDates = useSelector(
		selectors.filteredOnDates(
			filterStartDate,
			filterEndDate,
			filterCriteria
		)
	)
	/* Compound "ready-nonready" criteria to get rid of errors,
		when data hasn't been fetched while module has been loaded */
	const notReady = loading && !data && !sortedOnCriteria

	/* This function uses data, generated by local Navigation module to filter table data accordingly */
	function filterOnLocalNavigation(flatArrayOfProjects, selectedOption) {
		if (selectedOption === 'All') {
			return flatArrayOfProjects
		} else {
			let result = []
			result = flatArrayOfProjects.filter(project => {
				if (project.stageName === selectedOption) {
					return 1
				} else {
					return 0
				}
			})
			return result
		}
	}

	/* Function is passed to SearchAndFilter component, where it's criteria is changed with dropdown */
	const handleProjectsSort = criteria => {
		setProjectsSort(criteria)
	}

	/** Here's where project is opened while clicking on it's name in table of projects
	 * It pushes to router history project-card baseRoute plus the projectId in route
	 * It takes projectId from tableData from ProjectTable component from ProjectClick cell*/
	const handleProjectsClick = (projectId, history) => {
		history.push(projectCardModule.baseRoute + '/' + projectId)
		projectClick(projectId)
	}

	/* When dates removed from datepicker - remove filtering from table data */
	const handleDateFilterChange = (startDate, endDate, criteria) => {
		if (startDate && endDate) {
			setFilterStartDate(startDate.toDate().getTime())
			setFilterEndDate(endDate.toDate().getTime())
		} else {
			setFilterCriteria(criteria)
			setFilterEndDate(endDate)
			setFilterStartDate(startDate)
		}
	}

	/* data considering all filters and sort options */
	const allFilteredData = filterOnLocalNavigation(
		filteredOnDates,
		localOption
	)

	return (
		<DynamicModuleLoader modules={[module.default]}>
			{notReady ? (
				<Loading overlay>Загрузка личного кабинета</Loading>
			) : (
				<Flex
					style={{height: '100%'}}
					flexDirection={'column'}
					justifyContent={'flex-start'}
				>
					{/* A part, showing infographics */}{' '}
					<InfoGraphics mt={4}>
						<Flex
							flexFlow={'row nowrap'}
							justifyContent={'center'}
							mt={2}
						>
							<Text fontSize={3}>Инфографика</Text>
						</Flex>
						{/* Fullscreen icon */}{' '}
						<IconPosition justifyContent={'flex-end'}>
							<Icon
								name={'fullscreen'}
								color={'primary'}
								size={1}
							/>
						</IconPosition>
						<Flex flexFlow={'row nowrap'} justifyContent={'center'}>
							<GraphPosition top={5} left={-10}>
								{' '}
								<Scaler top={30}>
									<Infograph01 />
								</Scaler>
								<Scaler top={-184}>
									<Infograph02 />
								</Scaler>
							</GraphPosition>
						</Flex>
					</InfoGraphics>
					{/* Bottom part of personal page */}{' '}
					<BottomPart mb={4}>
						{/* Component with search and filtering functionality */}{' '}
						<SearchAndFilter
							amnt={allFilteredData.length}
							handleProjectsSort={handleProjectsSort}
							handleDateFilterChange={handleDateFilterChange}
						/>
						{/* A table with all fetched projects data , filtered
						with selectors and functions above */}
						<ProjectsTable
							projects={allFilteredData}
							openTable={openTable}
							projectClick={handleProjectsClick}
							history={history}
						/>
						{/* Button, that expands and contracts table when clicked
						 */}
						<ContentBox justifyContent={'flex-end'}>
							<Button
								m={3}
								onClick={() => {
									setTableOpen(!openTable)
									console.log(openTable)
								}}
								type="primary"
							>
								{openTable ? (
									<Text color={'white'}>Показать меньше</Text>
								) : (
									<Text color={'white'}>Показать ещё</Text>
								)}
							</Button>
						</ContentBox>
					</BottomPart>
					<CreateProjectModal />
				</Flex>
			)}
		</DynamicModuleLoader>
	)
}

LK.propTypes = {}

LK.defaultProps = {}

LK.baseRoute = module.baseRoute
LK.selectors = selectors

export default LK
